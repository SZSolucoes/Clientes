 
/*IMPLEMENTATION FOR ADAPTERS PROGRESS API: 
 *
 *THIS CODE WAS GENERATED BY
 *  -Datasul Finance Adapters Generator - v0.09
 *  -22/09/2010 - 16:30
 *
 *DO NOT MODIFY THIS SOURCE CODE. IT IS MAINTAINED BY THE ADAPTERS MODEL
 *
 **/




/* DEFINICAO DE PRE-PROCESSADORES - BEGIN */
&GLOBAL-DEFINE XmlApp            esp
&GLOBAL-DEFINE XmlMod            MRE
&GLOBAL-DEFINE XmlProdName       EMS2
&GLOBAL-DEFINE XmlProdVersion    204
&GLOBAL-DEFINE XmlTranName       InvoiceNFeRec
&GLOBAL-DEFINE XmlMinTranVersion 204.000
&GLOBAL-DEFINE XmlMaxTranVersion 204.999
&GLOBAL-DEFINE XmlListOfAction   add,upd

/* DEFINICAO DE PRE-PROCESSADORES - END */

/*LOCAL VARIABLES - BEGIN*/
DEFINE VARIABLE cReturnValue      AS CHARACTER                NO-UNDO.
DEFINE VARIABLE cTranAction       AS CHARACTER                NO-UNDO.
DEFINE VARIABLE cTranEvent        AS CHARACTER                NO-UNDO.
DEFINE VARIABLE cTranVersion      AS CHARACTER                NO-UNDO.
DEFINE VARIABLE hBusinessContent  AS HANDLE                   NO-UNDO.
DEFINE VARIABLE hGenXml           AS HANDLE                   NO-UNDO.
DEFINE VARIABLE hMessageHandler   AS HANDLE                   NO-UNDO.
DEFINE VARIABLE lSuccessProcess   AS LOGICAL                  NO-UNDO.
DEFINE VARIABLE c-chave-Sefaz     AS CHARACTER FORMAT "x(55)" NO-UNDO.
DEFINE VARIABLE c-versao          AS CHARACTER                NO-UNDO.
DEFINE VARIABLE c-value           AS CHARACTER                NO-UNDO.
DEFINE VARIABLE c-value2          AS CHARACTER                NO-UNDO.
DEFINE VARIABLE idNFref           AS INTEGER                  NO-UNDO.
DEFINE VARIABLE idDet             AS INTEGER                  NO-UNDO.
DEFINE VARIABLE idDI              AS INTEGER                  NO-UNDO.
DEFINE VARIABLE idadi             AS INTEGER                  NO-UNDO.
DEFINE VARIABLE idmed             AS INTEGER                  NO-UNDO.
DEFINE VARIABLE idarma            AS INTEGER                  NO-UNDO.
DEFINE VARIABLE idvol             AS INTEGER                  NO-UNDO.
DEFINE VARIABLE idlacres          AS INTEGER                  NO-UNDO.
DEFINE VARIABLE iddup             AS INTEGER                  NO-UNDO.
DEFINE VARIABLE idobsCont         AS INTEGER                  NO-UNDO.
DEFINE VARIABLE idobsFisco        AS INTEGER                  NO-UNDO.
DEFINE VARIABLE idprocRef         AS INTEGER                  NO-UNDO.
DEFINE VARIABLE idforDia          AS INTEGER                  NO-UNDO.
DEFINE VARIABLE iddeduc           AS INTEGER                  NO-UNDO.
DEFINE VARIABLE idreboque         AS INTEGER                  NO-UNDO.
DEFINE VARIABLE i-diferenca       AS INTEGER                  NO-UNDO.
DEFINE VARIABLE i-seq-refer       AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-NFref        AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-Det          AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-DI           AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-adi          AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-med          AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-arma         AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-vol          AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-lacres       AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-dup          AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-obsCont      AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-obsFisco     AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-procRef      AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-forDia       AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-deduc        AS INTEGER                  NO-UNDO.
DEFINE VARIABLE cont-reboque      AS INTEGER                  NO-UNDO.
DEFINE VARIABLE texto-msg         AS CHARACTER                NO-UNDO.
DEFINE VARIABLE codigo-msg        AS INTEGER                  NO-UNDO.
DEFINE VARIABLE c-destino         AS CHARACTER                NO-UNDO.
DEFINE VARIABLE c-origem          AS CHARACTER                NO-UNDO.
DEFINE VARIABLE c-arq-conv        AS CHARACTER                NO-UNDO.
DEFINE VARIABLE c-arq-xml         AS CHARACTER                NO-UNDO.
DEFINE VARIABLE h-acomp           AS HANDLE                   NO-UNDO.
DEFINE VARIABLE c-time            AS CHARACTER                NO-UNDO.

DEFINE TEMP-TABLE tt_log_erro NO-UNDO
     FIELD ttv_num_cod_erro     AS integer 
     FIELD ttv_des_msg_ajuda    AS character 
     FIELD ttv_des_msg_erro     AS character 
.


DEFINE TEMP-TABLE ttadi NO-UNDO
     FIELD seq          AS INT
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD cFabricante  AS CHARACTER   /*C¢digo do fabricante estrangeiro (usado nos sistemas internos de informaá∆o do emitente da NF-e)*/
     FIELD nAdicao      AS CHARACTER   /*N£mero da Adiá∆o*/
     FIELD nSeqAdic     AS CHARACTER   /*N£mero seqÅencial do item dentro da Adiá∆o*/
     FIELD ttadiID      AS INTEGER 
     FIELD ttDIID       AS INTEGER 
     FIELD vDescDI      AS DECIMAL   /*Valor do desconto do item da DI - adiá∆o*/
.


DEFINE TEMP-TABLE ttarma NO-UNDO
     FIELD seq          AS INT
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD descr        AS CHARACTER   /*Descriá∆o completa da arma, compreendendo: calibre, marca, capacidade, tipo de funcionamento, comprimento e demais elementos que permitam a sua perfeita identificaá∆o.*/
     FIELD nCano        AS CHARACTER   /*N£mero de sÇrie do cano*/
     FIELD nSerie       AS CHARACTER   /*N£mero de sÇrie da arma*/
     FIELD tpArma       AS CHARACTER   /*Indicador do tipo de arma de fogo (0 - Uso permitido 1 - Uso restrito)*/
     FIELD ttarmaID     AS INTEGER 
     FIELD ttdetID      AS INTEGER 
.


DEFINE TEMP-TABLE ttavulsa NO-UNDO
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD CNPJ_00      AS CHARACTER   /*CNPJ do ‡rg∆o emissor*/
     FIELD dEmi_00      AS DATE   /*Data de emiss∆o do DAR (AAAA-MM-DD)*/
     FIELD dPag         AS DATE   /*Data de pagamento do DAR (AAAA-MM-DD)*/
     FIELD fone_00      AS CHARACTER   /*Telefone*/
     FIELD matr         AS CHARACTER   /*Matr°cula do agente*/
     FIELD nDAR         AS CHARACTER   /*N£mero do Documento de Arrecadaá∆o de Receita*/
     FIELD repEmi       AS CHARACTER   /*Repartiá∆o Fiscal emitente*/
     FIELD ttavulsaID   AS INTEGER 
     FIELD ttNFeID      AS INTEGER 
     FIELD UF_00        AS CHARACTER   /*Sigla da Unidade da Federaá∆o*/
     FIELD vDAR         AS DECIMAL   /*Valor Total constante no DAR*/
     FIELD xAgente      AS CHARACTER   /*Nome do agente*/
     FIELD xOrgao       AS CHARACTER   /*‡rg∆o emitente*/
.


DEFINE TEMP-TABLE tt-cana NO-UNDO
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD qTotAnt      AS decimal    /*Total Anterior // v2.0*/
     FIELD qTotGer      AS decimal    /*Total Geral // v2.0*/
     FIELD qTotMes      AS decimal    /*Total do màs // v2.0*/
     FIELD ref          AS CHARACTER   /*Màs e Ano de Referància, formato: MM/AAAA // 2.0*/
     FIELD safra        AS CHARACTER   /*Identificaá∆o da safra // v2.0*/
     FIELD tt-canaID    AS INTEGER 
     FIELD ttNFeID      AS INTEGER 
     FIELD vFor         AS DECIMAL   /*Valor  dos fornecimentos // v2.0*/
     FIELD vLiqFor      AS DECIMAL   /*Valor L°quido dos fornecimentos // v2.0*/
     FIELD vTotDed      AS DECIMAL   /*Valor Total das Deduá‰es // v2.0*/
     INDEX ixtt-canaID IS PRIMARY UNIQUE tt-canaID ASCENDING
.


DEFINE TEMP-TABLE ttcobr NO-UNDO
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD nFat         AS CHARACTER   /*N£mero da fatura*/
     FIELD cobrID       AS INTEGER 
     FIELD ttNFeID      AS INTEGER 
     FIELD vDesc_01     AS DECIMAL   /*Valor do desconto da fatura*/
     FIELD vLiq         AS DECIMAL   /*Valor l°quido da fatura*/
     FIELD vOrig        AS DECIMAL   /*Valor original da fatura*/
     INDEX ixcobrID IS PRIMARY UNIQUE cobrID ASCENDING
.


DEFINE TEMP-TABLE ttcompra NO-UNDO
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD tt-compraID  AS INTEGER 
     FIELD ttNFeID      AS INTEGER 
     FIELD xCont        AS CHARACTER   /*Informaá∆o do contrato*/
     FIELD xNEmp        AS CHARACTER   /*Informaá∆o da Nota de Empenho de compras p£blicas*/
     FIELD xPed         AS CHARACTER   /*Informaá∆o do pedido*/
.


DEFINE TEMP-TABLE ttdeduc NO-UNDO
     FIELD seq          AS INT
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD tt-canaID    AS INTEGER 
     FIELD ttdeducID    AS INTEGER 
     FIELD vDed         AS DECIMAL   /*valor da deduá∆o // v2.0*/
     FIELD xDed         AS CHARACTER   /*Descriá∆o da Deduá∆o // v2.0*/
.


DEFINE TEMP-TABLE ttdest NO-UNDO
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD CEP_00       AS CHARACTER   /*CEP*/
     FIELD cMun_00      AS INTEGER   /*C¢digo do munic°pio (utilizar a tabela do IBGE), informar 9999999 para operaá‰es com o exterior.*/
     FIELD CNPJ_01      AS CHARACTER   /*N£mero do CNPJ*/
     FIELD cPais_00     AS INTEGER   /*C¢digo do pa°s*/
     FIELD CPF_00       AS CHARACTER   /*N£mero do CPF*/
     FIELD email        AS CHARACTER   /*Informar o e-mail do destinat†rio. O campo pode ser utilizado para informar o e-mail de recepá∆o da NF-e indicada pelo destinat†rio (v2.0)*/
     FIELD fone_01      AS CHARACTER   /*Telefone, preencher com C¢digo DDD + n£mero do telefone , nas operaá‰es com exterior Ç permtido informar o c¢digo do pa°s + c¢digo da localidade + n£mero do telefone*/
     FIELD IE_00        AS CHARACTER   /*Inscriá∆o Estadual (obrigat¢rio nas operaá‰es com contribuintes do ICMS)*/
     FIELD ISUF         AS CHARACTER   /*Inscriá∆o na SUFRAMA (Obrigat¢rio nas operaá‰es com as †reas com benef°cios de incentivos fiscais sob controle da SUFRAMA) PL_005d - 11/08/09 - alterado para aceitar 8 ou 9 d°gitos*/
     FIELD nro_00       AS CHARACTER   /*N£mero*/
     FIELD ttdestID     AS INTEGER 
     FIELD ttNFeID      AS INTEGER 
     FIELD UF_01        AS CHARACTER   /*Sigla da UF, informar EX para operaá‰es com o exterior.*/
     FIELD xBairro_00   AS CHARACTER   /*Bairro*/
     FIELD xCpl_00      AS CHARACTER   /*Complemento*/
     FIELD xLgr_00      AS CHARACTER   /*Logradouro*/
     FIELD xMun_00      AS CHARACTER   /*Nome do munic°pio, informar EXTERIOR para operaá‰es com o exterior.*/
     FIELD xNome_00     AS CHARACTER   /*Raz∆o Social ou nome do destinat†rio*/
     FIELD xPais_00     AS CHARACTER   /*Nome do pa°s*/
.


DEFINE TEMP-TABLE ttdet NO-UNDO
     FIELD seq              AS INT
     FIELD chave            AS CHARACTER FORMAT "x(55)" 
     FIELD anoFab           AS CHARACTER   /*Ano de Fabricaá∆o*/
     FIELD anoMod           AS CHARACTER   /*Ano Modelo de Fabricaá∆o*/
     FIELD cCor             AS CHARACTER   /*Cor do ve°culo (c¢digo de cada montadora)*/
     FIELD cCorDENATRAN     AS CHARACTER   /*C¢digo da Cor Segundo as regras de prÇ-cadastro do DENATRAN (v2.0) 01-AMARELO 02-AZUL 03-BEGE 04-BRANCA 05-CINZA 06-DOURADA 07-GRENA 08-LARANJA 09-MARROM 10-PRATA 11-PRETA 12-ROSA 13-ROXA 14-VERDE 15-VERMELHA 16-FANTASIA*/
     FIELD cEAN             AS CHARACTER   /*GTIN (Global Trade Item Number) do produto, antigo c¢digo EAN ou c¢digo de barras*/
     FIELD cEANTrib         AS CHARACTER   /*GTIN (Global Trade Item Number) da unidade tribut†vel, antigo c¢digo EAN ou c¢digo de barras*/
     FIELD cEnq             AS CHARACTER   /*C¢digo de Enquadramento Legal do IPI (tabela a ser criada pela RFB)*/
     FIELD CFOP             AS CHARACTER   /*C¢digo Fiscal de Operaá‰es e Prestaá‰es*/
     FIELD chassi           AS CHARACTER   /*Chassi do ve°culo - VIN (c¢digo-identificaá∆o-ve°culo)*/
     FIELD cilin            AS CHARACTER   /*Capacidade volunt†ria do motor expressa em cent°metros c£bicos (CC). (cilindradas) (v2.0)*/
     FIELD clEnq            AS CHARACTER   /*Classe de Enquadramento do IPI para Cigarros e Bebidas*/
     FIELD cListServ        AS CHARACTER   /*Informar o Item da lista de serviáos da LC 116/03 em que se classifica o serviáo.*/
     FIELD CM3              AS CHAR  /*CM3 (potància)*/
     FIELD CMKG             AS CHAR  /*CMKG*/
     FIELD RENAVAM          AS CHAR  /*RENAVAM, informar apenas quando existente*/
     FIELD genero           AS CHAR  /*Gànero do produto ou serviáo. Preencher de acordo com a Tabela de Cap°tulos da NCM. Em caso de serviáo, n∆o incluir a TAG.*/
     FIELD vBCICMS          AS DEC   /*BC do ICMS pr¢prio*/
     FIELD vBCICMSST        AS DEC   /*BC do ICMS ST*/
     FIELD vBCICMSSTDest    AS DEC   /*BC do ICMS ST da UF de destino*/
     FIELD vBCICMSSTCons    AS DEC   /*BC do ICMS ST da UF de consumo*/
     FIELD vICMSSTCons      AS DEC   /*Valor do ICMSST da UF de consumo*/
     FIELD cMod             AS CHARACTER   /*C¢digo Marca Modelo (utilizar tabela RENAVAM)*/
     FIELD CMT              AS CHARACTER   /*CMT-Capacidade M†xima de Traá∆o - em Toneladas 4 casas decimais (v2.0)*/
     FIELD cMunFG           AS INTEGER   /*Informar o munic°pio de ocorrància do fato gerador do ISSQN. Utilizar a Tabela do IBGE (Anexo VII - Tabela de UF, Munic°pio e Pa°s). "Atená∆o, n∆o vincular com os campos B12, C10 ou E10" v2.0*/
     FIELD CNPJProd         AS CHARACTER   /*CNPJ do produtor da mercadoria, quando diferente do emitente. Somente para os casos de exportaá∆o direta ou indireta.*/
     FIELD CODIF            AS CHARACTER   /*C¢digo de autorizaá∆o / registro do CODIF. Informar apenas quando a UF utilizar o CODIF (Sistema de Controle do Diferimento do Imposto nas Operaá‰es com AEAC - µlcool Et°lico Anidro Combust°vel).*/
     FIELD CSTIPITrib       AS CHARACTER
     FIELD CSTIPINT         AS CHARACTER
     FIELD condVeic         AS CHARACTER   /*Condiá∆o do ve°culo (1 - acabado 2 - inacabado 3 - semi-acabado)*/
     FIELD cProd            AS CHARACTER   /*C¢digo do produto ou serviáo. Preencher com CFOP caso se trate de itens n∆o relacionados com mercadorias/produto e que o contribuinte n∆o possua codificaá∆o pr¢pria Formato "CFOP9999".*/
     FIELD cProdANP         AS CHARACTER   /*C¢digo de produto da ANP. Utilizar a codificaá∆o de produtos do Sistema de Informaá‰es de Movimentaá∆o de produtos - SIMP(http://www.anp.gov.br/simp/index.h tm), somente informar 999999999 quando n∆o se tratar  de produtos n∆o regulados pela ANP - Agància Nacional do Petr¢leo.*/
     FIELD cSelo            AS CHARACTER   /*C¢digo do selo de controle do IPI */
     FIELD cSitTrib         AS CHARACTER   /*Informar o c¢digo da tributaá∆o do ISSQN: N - NORMAL R - RETIDA S -SUBSTITUTA I - ISENTA. (v.2.0)*/
     FIELD CSOSN            AS CHARACTER   /*101- Tributada pelo Simples Nacional com permiss∆o de crÇdito. (v.2.0)*/
     FIELD CSOSN_00         AS CHARACTER   /*102- Tributada pelo Simples Nacional sem permiss∆o de crÇdito.  103 - Isená∆o do ICMS  no Simples Nacional para faixa de receita bruta. 300 - Imune. 400 - N∆o tributda pelo Simples Nacional (v.2.0) (v.2.0)*/
     FIELD CSOSN_01         AS CHARACTER   /*201- Tributada pelo Simples Nacional com permiss∆o de crÇdito e com cobranáa do ICMS por Substituiá∆o Tribut†ria (v.2.0)*/
     FIELD CSOSN_02         AS CHARACTER   /*202- Tributada pelo Simples Nacional sem permiss∆o de crÇdito e com cobranáa do ICMS por Substituiá∆o Tribut†ria 203-  Isená∆o do ICMS nos Simples Nacional para faixa de receita bruta e com cobranáa do ICMS por Substituiá∆o Tribut†ria (v.2.0)*/
     FIELD CSOSN_03         AS CHARACTER   /*500 - ICMS cobrado anterirmente por substituiá∆o tribut†ria (substitu°do) ou por antecipaá∆o (v.2.0)*/
     FIELD CSOSN_04         AS CHARACTER   /*Tributaá∆o pelo ICMS 900 - Outros(v2.0)*/
     FIELD CST              AS CHARACTER   /*Tributá∆o pelo ICMS 00 - Tributada integralmente */
     FIELD CST_00           AS CHARACTER   /*10 - Tributada e com cobranáa do ICMS por substituiá∆o tribut†ria */
     FIELD CST_01           AS CHARACTER   /*Tributá∆o pelo ICMS 20 - Com reduá∆o de base de c†lculo*/
     FIELD CST_02           AS CHARACTER   /*Tributá∆o pelo ICMS 30 - Isenta ou n∆o tributada e com cobranáa do ICMS por substituiá∆o tribut†ria */
     FIELD CST_03           AS CHARACTER   /*Tributaá∆o pelo ICMS 40 - Isenta 41 - N∆o tributada 50 - Suspens∆o 51 - Diferimento */
     FIELD CST_04           AS CHARACTER   /*Tributá∆o pelo ICMS 20 - Com reduá∆o de base de c†lculo*/
     FIELD CST_05           AS CHARACTER   /*Tributaá∆o pelo ICMS 60 - ICMS cobrado anteriormente por substituiá∆o tribut†ria */
     FIELD CST_06           AS CHARACTER   /*Tributá∆o pelo ICMS 70 - Com reduá∆o de base de c†lculo e cobranáa do ICMS por substituiá∆o tribut†ria */
     FIELD CST_07           AS CHARACTER   /*Tributá∆o pelo ICMS 90 - Outras*/
     FIELD CST_08           AS CHARACTER   /*Tributaá∆o pelo ICMS 10 - Tributada e com cobranáa do ICMS por substituiá∆o tribut†ria 90 - Outros.*/
     FIELD CST_09           AS CHARACTER   /*Tributá∆o pelo ICMS 41-N∆o Tributado (v2.0)*/
     FIELD CST_10           AS CHARACTER   /*C¢digo da Situaá∆o Tribut†ria do IPI: 00-Entrada com recuperaá∆o de crÇdito 49 - Outras entradas 50-Sa°da tributada 99-Outras sa°das*/
     FIELD CST_11           AS CHARACTER   /*C¢digo da Situaá∆o Tribut†ria do IPI: 01-Entrada tributada com al°quota zero 02-Entrada isenta 03-Entrada n∆o-tributada 04-Entrada imune 05-Entrada com suspens∆o 51-Sa°da tributada com al°quota zero 52-Sa°da isenta 53-Sa°da n∆o-tributada 54-Sa°da imune 55-Sa°da com suspens∆o*/
     FIELD CST_12           AS CHARACTER   /*C¢digo de Situaá∆o Tribut†ria do PIS. 01 - Operaá∆o Tribut†vel - Base de C†lculo = Valor da Operaá∆o Al°quota Normal (Cumulativo/N∆o Cumulativo) 02 - Operaá∆o Tribut†vel - Base de Calculo = Valor da Operaá∆o (Al°quota Diferenciada)*/
     FIELD CST_13           AS CHARACTER   /*C¢digo de Situaá∆o Tribut†ria do PIS. 03 - Operaá∆o Tribut†vel - Base de Calculo = Quantidade Vendida x Al°quota por Unidade de Produto*/
     FIELD CST_14           AS CHARACTER   /*C¢digo de Situaá∆o Tribut†ria do PIS. 04 - Operaá∆o Tribut†vel - Tributaá∆o Monof†sica - (Al°quota Zero) 06 - Operaá∆o Tribut†vel - Al°quota Zero 07 - Operaá∆o Isenta da contribuiá∆o 08 - Operaá∆o Sem Incidància da contribuiá∆o 09 - Operaá∆o com suspens∆o da contribuiá∆o*/
     FIELD CST_15           AS CHARACTER   /*C¢digo de Situaá∆o Tribut†ria do PIS. 99 - Outras Operaá‰es.*/
     FIELD CST_16           AS CHARACTER   /*C¢digo de Situaá∆o Tribut†ria do COFINS. 01 - Operaá∆o Tribut†vel - Base de C†lculo = Valor da Operaá∆o Al°quota Normal (Cumulativo/N∆o Cumulativo) 02 - Operaá∆o Tribut†vel - Base de Calculo = Valor da Operaá∆o (Al°quota Diferenciada)*/
     FIELD CST_17           AS CHARACTER   /*C¢digo de Situaá∆o Tribut†ria do COFINS. 03 - Operaá∆o Tribut†vel - Base de Calculo = Quantidade Vendida x Al°quota por Unidade de Produto*/
     FIELD CST_18           AS CHARACTER   /*C¢digo de Situaá∆o Tribut†ria do COFINS: 04 - Operaá∆o Tribut†vel - Tributaá∆o Monof†sica - (Al°quota Zero) 06 - Operaá∆o Tribut†vel - Al°quota Zero  07 - Operaá∆o Isenta da contribuiá∆o 08 - Operaá∆o Sem Incidància da contribuiá∆o 09 - Operaá∆o com suspens∆o da contribuiá∆o*/
     FIELD CST_19           AS CHARACTER   /*C¢digo de Situaá∆o Tribut†ria do COFINS: 49 50 51 52 53 54 55 56 60 61 62 63 64 65 66 67 70 71 72 73 74 75 98 99.*/
     FIELD dist             AS CHARACTER   /*DistÉncia entre eixos*/
     FIELD espVeic          AS CHARACTER   /*EspÇcie de ve°culo (utilizar tabela RENAVAM)*/
     FIELD EXTIPI           AS CHARACTER   /*C¢digo EX TIPI (3 posiá‰es)*/
     FIELD indTot           AS CHARACTER   /*Este campo dever† ser preenchido com: 0 - o valor do item (vProd) n∆o comp‰e o valor total da NF-e (vProd) 1  - o valor do item (vProd) comp‰e o valor total da NF-e (vProd) (v2.0) */
     FIELD infAdProd        AS CHARACTER   /*Informaá‰es adicionais do produto (norma referenciada, informaá‰es complementares, etc)*/
     FIELD lota             AS CHARACTER   /*Quantidade m†xima de permitida de passageiros sentados, inclusive motorista. (v2.0)*/
     FIELD modBC            AS CHARACTER   /*Modalidade de determinaá∆o da BC do ICMS: 0 - Margem Valor Agregado (%) 1 - Pauta (valor) 2 - Preáo Tabelado M†ximo (valor) 3 - Valor da Operaá∆o.*/
     FIELD modBC_00         AS CHARACTER   /*Modalidade de determinaá∆o da BC do ICMS: 0 - Margem Valor Agregado (%) 1 - Pauta (valor) 2 - Preáo Tabelado M†ximo (valor) 3 - Valor da Operaá∆o.*/
     FIELD modBC_01         AS CHARACTER
     FIELD modBC_02         AS CHARACTER
     FIELD modBC_03         AS CHARACTER
     FIELD modBC_04         AS CHARACTER
     FIELD modBC_05         AS CHARACTER
     FIELD modBC_06         AS CHARACTER
     FIELD modBCST          AS CHARACTER   /*Modalidade de determinaá∆o da BC do ICMS ST: 0 - Preáo tabelado ou m†ximo  sugerido 1 - Lista Negativa (valor) 2 - Lista Positiva (valor) 3 - Lista Neutra (valor) 4 - Margem Valor Agregado (%) 5 - Pauta (valor)*/
     FIELD modBCST_00       AS CHARACTER
     FIELD modBCST_01       AS CHARACTER
     FIELD modBCST_02       AS CHARACTER
     FIELD modBCST_03       AS CHARACTER
     FIELD modBCST_04       AS CHARACTER
     FIELD modBCST_05       AS CHARACTER
     FIELD modBCST_06       AS CHARACTER
     FIELD motDesICMS       AS CHARACTER   /*Este campo ser† preenchido quando o campo anterior estiver preenchido. Informar o motivo da desoneraá∆o: 1 - T†xi 2 - Deficiente F°sico 3 - Produtor Agropecu†rio 4 - Frotista/Locadora 5 - Diplom†tico/Consular 6 - Utilit†rios e Motocicletas da Amazìnia Ocidental e µreas de Livre ComÇrcio (Resoluá∆o 714/88 e 790/94 - CONTRAN e suas alteraá‰es) 7 - SUFRAMA 9 - outros. (v2.0)*/
     FIELD NCM              AS CHARACTER   /*C¢digo NCM (8 posiá‰es), ser† permitida a informaá∆o do gànero (posiá∆o do cap°tulo do NCM) quando a operaá∆o n∆o for de comÇrcio exterior (importaá∆o/exportaá∆o) ou o produto n∆o seja tributado pelo IPI. Em caso de item de serviáo ou item que n∆o tenham produto (Ex. transferància de crÇdito, crÇdito do ativo imobilizado, etc.), informar o c¢digo 00 (zeros) (v2.0)*/
     FIELD nItemPed         AS CHARACTER   /*N£mero do Item do Pedido de Compra - Identificaá∆o do n£mero do item do pedido de Compra (v2.0)*/
     FIELD nMotor           AS CHARACTER   /*N£mero do motor*/
     FIELD nSerie           AS CHARACTER   /*Serial (sÇrie)*/
     FIELD orig             AS CHARACTER   /*origem da mercadoria: 0 - Nacional 1 - Estrangeira - Importaá∆o direta 2 - Estrangeira - Adquirida no mercado interno */
     FIELD orig_00          AS CHARACTER
     FIELD orig_01          AS CHARACTER
     FIELD orig_02          AS CHARACTER
     FIELD orig_03          AS CHARACTER
     FIELD orig_04          AS CHARACTER
     FIELD orig_05          AS CHARACTER
     FIELD orig_06          AS CHARACTER
     FIELD orig_07          AS CHARACTER
     FIELD orig_08          AS CHARACTER
     FIELD orig_09          AS CHARACTER
     FIELD orig_10          AS CHARACTER
     FIELD orig_11          AS CHARACTER
     FIELD orig_12          AS CHARACTER
     FIELD orig_13          AS CHARACTER
     FIELD orig_14          AS CHARACTER
     FIELD orig_15          AS CHARACTER
     FIELD pBCOp            AS DECIMAL   /*Percentual para determinaá∆o do valor  da Base de C†lculo da operaá∆o pr¢pria. (v2.0)*/
     FIELD pCOFINS          AS DECIMAL   /*Al°quota do COFINS (em percentual)*/
     FIELD pCOFINS_00       AS DECIMAL   /*Al°quota do COFINS (em percentual)*/
     FIELD pCOFINS_01       AS DECIMAL   /*Al°quota do COFINS ST(em percentual)*/
     FIELD pCredSN          AS decimal   /*Al°quota aplic†vel de c†lculo do crÇdito (Simples Nacional). (v2.0)*/
     FIELD pCredSN_00       AS decimal
     FIELD pCredSN_01       AS decimal
     FIELD pesoB            AS CHARACTER   /*Peso bruto*/
     FIELD pesoL            AS CHARACTER   /*Peso l°quido*/
     FIELD pICMS            AS decimal   /*Al°quota do ICMS*/
     FIELD pICMS_00         AS decimal
     FIELD pICMS_01         AS decimal
     FIELD pICMS_02         AS decimal
     FIELD pICMS_03         AS decimal
     FIELD pICMS_04         AS decimal
     FIELD pICMS_05         AS decimal
     FIELD pICMS_06         AS decimal
     FIELD pICMSST          AS decimal   /*Al°quota do ICMS ST*/
     FIELD pICMSST_00       AS decimal
     FIELD pICMSST_01       AS decimal
     FIELD pICMSST_02       AS decimal
     FIELD pICMSST_03       AS decimal
     FIELD pICMSST_04       AS decimal
     FIELD pICMSST_05       AS decimal
     FIELD pICMSST_06       AS decimal
     FIELD pIPI             AS decimal   /*Al°quota do IPI*/
     FIELD pMVAST           AS decimal   /*Percentual da Margem de Valor Adicionado ICMS ST*/
     FIELD pMVAST_00        AS decimal
     FIELD pMVAST_01        AS decimal
     FIELD pMVAST_02        AS decimal
     FIELD pMVAST_03        AS decimal
     FIELD pMVAST_04        AS decimal
     FIELD pMVAST_05        AS decimal
     FIELD pMVAST_06        AS decimal
     FIELD pot              AS CHARACTER   /*Potància m†xima do motor do ve°culo em cavalo vapor (CV). (potància-ve°culo)*/
     FIELD pPIS             AS decimal   /*Al°quota do PIS (em percentual)*/
     FIELD pPIS_00          AS decimal
     FIELD pPIS_01          AS decimal   /*Al°quota do PIS ST (em percentual)*/
     FIELD pRedBC           AS decimal   /*Percentual de reduá∆o da BC*/
     FIELD pRedBC_00        AS decimal
     FIELD pRedBC_01        AS decimal
     FIELD pRedBC_02        AS decimal
     FIELD pRedBC_03        AS decimal
     FIELD pRedBC_04        AS decimal
     FIELD pRedBCST         AS decimal   /*Percentual de reduá∆o da BC ICMS ST */
     FIELD pRedBCST_00      AS decimal
     FIELD pRedBCST_01      AS decimal
     FIELD pRedBCST_02      AS decimal
     FIELD pRedBCST_03      AS decimal
     FIELD pRedBCST_04      AS decimal
     FIELD pRedBCST_05      AS decimal
     FIELD pRedBCST_06      AS decimal
     FIELD qBCProd          AS decimal   /*BC do CIDE ( Quantidade comercializada) */
     FIELD qBCProd_00       AS decimal   /*Quantidade Vendida */
     FIELD qBCProd_01       AS decimal
     FIELD qBCProd_02       AS decimal
     FIELD qBCProd_03       AS decimal
     FIELD qBCProd_04       AS decimal
     FIELD qCom             AS decimal   FORMAT "9,999,999,999,999.9999" /*Quantidade Comercial*/
     FIELD qSelo            AS CHARACTER   /*Quantidade de selo de controle do IPI*/
     FIELD qTemp            AS DECIMAL   /*Quantidade de combust°vel faturada Ö temperatura ambiente. Informar quando a quantidade faturada informada no campo qCom (I10) tiver sido ajustada para uma temperatura diferente da ambiente.*/
     FIELD qTrib            AS DECIMAL   /*Quantidade Tribut†vel - alterado para aceitar de 0 a 4 casas decimais e 11 inteiros (v2.0)*/
     FIELD qUnid            AS DECIMAL   /*Quantidade total na unidade padr∆o para tributaá∆o */
     FIELD tpComb           AS CHARACTER   /*Tipo de combust°vel - Utilizar Tabela RENAVAM (v2.0) 01-µlcool 02-Gasolina 03-Diesel (...) 16-µlcool/Gasolina 17-Gasolina/µlcool/GNV 18-Gasolina/ElÇtrico */
     FIELD tpOp             AS CHARACTER   /*Tipo da Operaá∆o (1 - Venda concession†ria 2 - Faturamento direto 3 - Venda direta 0 - Outros)*/
     FIELD tpPint           AS CHARACTER   /*Tipo de pintura*/
     FIELD tpRest           AS CHARACTER   /*Restriá∆o 0 - N∆o h† 1 - Alienaá∆o Fiduci†ria 2 - Arrendamento Mercantil 3 - Reserva de Dom°nio 4 - Penhor de Ve°culos 9 - outras. (v2.0)*/
     FIELD tpVeic           AS CHARACTER   /*Tipo de ve°culo (utilizar tabela RENAVAM)*/
     FIELD ttdetID          AS INTEGER 
     FIELD ttNFeID          AS INTEGER 
     FIELD uCom             AS CHARACTER   /*Unidade comercial*/
     FIELD UFCons           AS CHARACTER   /*Sigla da UF de Consumo*/
     FIELD UFST             AS CHARACTER   /*Sigla da UF para qual Ç devido o ICMS ST da operaá∆o. (v2.0)*/
     FIELD uTrib            AS CHARACTER   /*Unidade Tribut†vel*/
     FIELD vAliq            AS decimal   /*Al°quota do ISSQN*/
     FIELD vAliqProd        AS decimal   /*Al°quota do CIDE  (em reais)*/
     FIELD vAliqProd_00     AS decimal   /*Al°quota do PIS (em reais)*/
     FIELD vAliqProd_01     AS decimal   /*Al°quota do PIS ST (em reais)*/
     FIELD vAliqProd_02     AS decimal   /*Al°quota do COFINS (em reais)*/
     FIELD vAliqProd_03     AS decimal   /*Al°quota do COFINS (em reais)*/
     FIELD vAliqProd_04     AS decimal   /*Al°quota do COFINS ST(em reais)*/
     FIELD vBC              AS decimal   /*Valor da BC do ICMS*/
     FIELD vBC_00           AS decimal   /*Valor da BC do ICMS*/
     FIELD vBC_01           AS decimal   /*Valor da BC do ICMS*/
     FIELD vBC_02           AS decimal   /*Valor da BC do ICMS*/
     FIELD vBC_03           AS decimal   /*Valor da BC do ICMS*/
     FIELD vBC_04           AS decimal   /*Valor da BC do ICMS*/
     FIELD vBC_05           AS decimal   /*Valor da BC do ICMS (v2.0)*/
     FIELD vBC_06           AS decimal   /*Valor da BC do ICMS*/
     FIELD vBC_07           AS decimal   /*Valor da BC do IPI*/
     FIELD vBC_08           AS decimal   /*Base da BC do Imposto de Importaá∆o*/
     FIELD vBC_09           AS decimal   /*Valor da BC do ISSQN*/
     FIELD vBC_10           AS decimal   /*Valor da BC do PIS*/
     FIELD vBC_11           AS decimal   /*Valor da BC do PIS*/
     FIELD vBC_12           AS decimal   /*Valor da BC do PIS ST*/
     FIELD vBC_13           AS decimal   /*Valor da BC do COFINS*/
     FIELD vBC_14           AS decimal   /*Valor da BC do COFINS*/
     FIELD vBC_15           AS decimal   /*Valor da BC do COFINS ST*/
     FIELD vBCST            AS decimal   /*Valor da BC do ICMS ST*/
     FIELD vBCST_00         AS decimal   /*Valor da BC do ICMS ST*/
     FIELD vBCST_01         AS decimal   /*Valor da BC do ICMS ST*/
     FIELD vBCST_02         AS decimal   /*Valor da BC do ICMS ST*/
     FIELD vBCST_03         AS decimal   /*Valor da BC do ICMS ST (v2.0)*/
     FIELD vBCST_04         AS decimal   /*Valor da BC do ICMS ST (v2.0)*/
     FIELD vBCST_05         AS decimal   /*Valor da BC do ICMS ST (v2.0)*/
     FIELD vBCST_06         AS decimal   /*Valor da BC do ICMS ST*/
     FIELD vBCST_07         AS decimal
     FIELD vBCSTDest        AS decimal   /* Informar o valor da BC do ICMS ST da UF destino (v2.0)*/
     FIELD vBCSTRet         AS decimal   /*Valor da BC do ICMS ST retido anteriormente (v2.0)*/
     FIELD vBCSTRet_00      AS decimal   /*Informar o valor da BC do ICMS ST retido na UF remetente (v2.0)*/
     FIELD vBCSTRet_01      AS decimal   /*Valor da BC do ICMS ST retido anteriormente (v2.0)*/
     FIELD vCIDE            AS decimal   /*Valor do CIDE*/
     FIELD vCOFINS          AS decimal   /*Valor do COFINS*/
     FIELD vCOFINS_00       AS decimal   /*Valor do COFINS*/
     FIELD vCOFINS_01       AS decimal   /*Valor do COFINS*/
     FIELD vCOFINS_02       AS decimal   /*Valor do COFINS ST*/
     FIELD vCredICMSSN      AS decimal   /*Valor crÇdito do ICMS que pode ser aproveitado nos termos do art. 23 da LC 123 (Simples Nacional) (v2.0)*/
     FIELD vCredICMSSN_00   AS decimal   /*Valor crÇdito do ICMS que pode ser aproveitado nos termos do art. 23 da LC 123 (Simples Nacional) (v2.0)*/
     FIELD vCredICMSSN_01   AS decimal   /*Valor crÇdito do ICMS que pode ser aproveitado nos termos do art. 23 da LC 123 (Simples Nacional) (v2.0)*/
     FIELD vDesc            AS decimal   /*Valor do Desconto*/
     FIELD vDespAdu         AS decimal   /*Valor das despesas aduaneiras*/
     FIELD vFrete           AS decimal   /*Valor Total do Frete*/
     FIELD vICMS            AS decimal   /*Valor do ICMS*/
     FIELD vICMS_00         AS decimal   /*Valor do ICMS*/
     FIELD vICMS_01         AS decimal   /*Valor do ICMS*/
     FIELD vICMS_02         AS decimal   /*O valor do ICMS ser† informado apenas nas operaá‰es com ve°culos beneficiados com a desoneraá∆o condicional do ICMS. (v2.0)*/
     FIELD vICMS_03         AS decimal   /*Valor do ICMS*/
     FIELD vICMS_04         AS decimal   /*Valor do ICMS*/
     FIELD vICMS_05         AS decimal   /*Valor do ICMS*/
     FIELD vICMS_06         AS decimal   /*Valor do ICMS (v2.0)*/
     FIELD vICMS_07         AS decimal   /*Valor do ICMS*/
     FIELD vICMSST          AS decimal   /*Valor do ICMS ST*/
     FIELD vICMSST_00       AS decimal   /*Valor do ICMS ST*/
     FIELD vICMSST_01       AS decimal   /*Valor do ICMS ST*/
     FIELD vICMSST_02       AS decimal   /*Valor do ICMS ST*/
     FIELD vICMSST_03       AS decimal   /*Valor do ICMS ST (v2.0)*/
     FIELD vICMSST_04       AS decimal   /*Valor do ICMS ST (v2.0)*/
     FIELD vICMSST_05       AS decimal   /*Valor do ICMS ST (v2.0)*/
     FIELD vICMSST_06       AS decimal   /*Valor do ICMS ST*/
     FIELD vICMSST_07       AS decimal
     FIELD vICMSSTDest      AS decimal   /*Informar o valor da BC do ICMS ST da UF destino (v2.0)*/
     FIELD vICMSSTDest_00   AS decimal
     FIELD vICMSSTRet       AS decimal   /*Valor do ICMS ST retido anteriormente  (v2.0)*/
     FIELD vICMSSTRet_00    AS decimal   /* Informar o valor do ICMS ST retido na UF remetente (iv2.0))*/
     FIELD vICMSSTRet_01    AS decimal   /*Valor do ICMS ST retido anteriormente  (v2.0)*/
     FIELD vII              AS decimal   /*Valor do Imposto de Importaá∆o*/
     FIELD VIN              AS CHARACTER   /*Informa-se o ve°culo tem VIN (chassi) remarcado. R-Remarcado N-NormalVIN */
     FIELD vIOF             AS decimal   /*Valor do Imposto sobre Operaá‰es Financeiras*/
     FIELD vIPI             AS decimal   /*Valor do IPI*/
     FIELD vISSQN           AS decimal   /*Valor da do ISSQN*/
     FIELD vOutro           AS decimal   /*Outras despesas acess¢rias - (v2.0)*/
     FIELD vPIS             AS decimal   /*Valor do PIS*/
     FIELD vPIS_00          AS decimal   /*Valor do PIS*/
     FIELD vPIS_01          AS decimal   /*Valor do PIS*/
     FIELD vPIS_02          AS decimal   /*Valor do PIS ST*/
     FIELD vProd            AS decimal   /*Valor bruto do produto ou serviáo.*/
     FIELD vSeg             AS decimal   /*Valor Total do Seguro*/
     FIELD vUnCom           AS decimal   /*Valor unit†rio de comercializaá∆o  - alterado para aceitar 0 a 10 casas decimais e 11 inteiros (v2.0)*/
     FIELD vUnid            AS decimal   /*Valor por Unidade Tribut†vel. Informar o valor do imposto Pauta por unidade de medida.*/
     FIELD vUnTrib          AS decimal   /*Valor unit†rio de tributaá∆o - - alterado para aceitar 0 a 10 casas decimais e 11 inteiros (v2.0)*/
     FIELD xCor             AS CHARACTER   /*Descriá∆o da cor*/
     FIELD xPed             AS CHARACTER   /*pedido de compra - Informaá∆o de interesse do emissor para controle do B2B. (v2.0)*/
     FIELD xProd            AS CHARACTER   /*Descriá∆o do produto ou serviáo*/
     FIELD nitem            AS INT  
     INDEX ixttdetID IS PRIMARY UNIQUE ttdetID ASCENDING
.


DEF TEMP-TABLE tt-erro NO-UNDO
    FIELD identif-segment AS CHAR
    FIELD cd-erro         AS INTEGER
    FIELD desc-erro       AS CHAR FORMAT "x(80)"
.


DEFINE TEMP-TABLE ttDI NO-UNDO
     FIELD seq          AS INT
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD cExportador  AS CHARACTER   /*C¢digo do exportador (usado nos sistemas internos de informaá∆o do emitente da NF-e)*/
     FIELD dDesemb      AS DATE   /*Data do desembaraáo aduaneiro (AAAA-MM-DD)*/
     FIELD dDI          AS DATE   /*Data de registro da DI/DSI/DA (AAAA-MM-DD)*/
     FIELD nDI          AS CHARACTER   /*Numero do Documento de Importaá∆o DI/DSI/DA (DI/DSI/DA)*/
     FIELD ttdetID      AS INTEGER 
     FIELD ttDIID       AS INTEGER 
     FIELD UFDesemb     AS CHARACTER   /*UF onde ocorreu o desembaraáo aduaneiro*/
     FIELD xLocDesemb   AS CHARACTER   /*Local do desembaraáo aduaneiro*/
     INDEX ixttDIID IS PRIMARY UNIQUE ttDIID ASCENDING
.


DEFINE TEMP-TABLE ttdup NO-UNDO
     FIELD seq          AS INT
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD dVenc        AS DATE   /*Data de vencimento da duplicata (AAAA-MM-DD)*/
     FIELD nDup         AS CHARACTER   /*N£mero da duplicata*/
     FIELD tt-cobrID    AS INTEGER 
     FIELD ttdupID      AS INTEGER 
     FIELD vDup         AS DECIMAL   /*Valor da duplicata*/
.


DEFINE TEMP-TABLE ttemit NO-UNDO
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD CEP          AS CHARACTER   /*CEP*/
     FIELD cMun         AS INTEGER   /*C¢digo do munic°pio (utilizar a tabela do IBGE), informar 9999999 para operaá‰es com o exterior.*/
     FIELD CNAE         AS CHARACTER   /*CNAE Fiscal*/
     FIELD CNPJ         AS CHARACTER   /*N£mero do CNPJ do emitente*/
     FIELD cPais        AS INTEGER   /*C¢digo do pa°s*/
     FIELD CPF          AS CHARACTER   /*N£mero do CPF do emitente*/
     FIELD CRT          AS CHARACTER   /*C¢digo de Regime Tribut†rio. Este campo ser† obrigatoriamente preenchido com: 1 - Simples Nacional 2 - Simples Nacional - excesso de sublimite de receita bruta 3 - Regime Normal. (v2.0). */
     FIELD fone         AS CHARACTER   /*Preencher com C¢digo DDD + n£mero do telefone (v.2.0)*/
     FIELD IE           AS CHARACTER   /*Inscriá∆o Estadual*/
     FIELD IEST         AS CHARACTER   /*Inscricao Estadual do Substituto Tribut†rio*/
     FIELD IM           AS CHARACTER   /*Inscriá∆o Municipal*/
     FIELD nro          AS CHARACTER   /*N£mero*/
     FIELD emitID       AS INTEGER 
     FIELD ttNFeID      AS INTEGER 
     FIELD UF           AS CHARACTER   /*Sigla da UF*/
     FIELD xBairro      AS CHARACTER   /*Bairro*/
     FIELD xCpl         AS CHARACTER   /*Complemento*/
     FIELD xFant        AS CHARACTER   /*Nome fantasia*/
     FIELD xLgr         AS CHARACTER   /*Logradouro*/
     FIELD xMun         AS CHARACTER   /*Nome do munic°pio, informar EXTERIOR para operaá‰es com o exterior.*/
     FIELD xNome        AS CHARACTER   /*Raz∆o Social ou Nome do emitente*/
     FIELD xPais        AS CHARACTER   /*Nome do pa°s*/
.


DEFINE TEMP-TABLE ttentrega NO-UNDO
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD cMun_02      AS INTEGER   /*C¢digo do munic°pio (utilizar a tabela do IBGE)*/
     FIELD CNPJ_03      AS CHARACTER   /*CNPJ*/
     FIELD CPF_02       AS CHARACTER   /*CPF (v2.0)*/
     FIELD nro_02       AS CHARACTER   /*N£mero*/
     FIELD ttentregaID  AS INTEGER 
     FIELD ttNFeID      AS INTEGER 
     FIELD UF_03        AS CHARACTER   /*Sigla da UF*/
     FIELD xBairro_02   AS CHARACTER   /*Bairro*/
     FIELD xCpl_02      AS CHARACTER   /*Complemento*/
     FIELD xLgr_02      AS CHARACTER   /*Logradouro*/
     FIELD xMun_02      AS CHARACTER   /*Nome do munic°pio*/
.


DEFINE TEMP-TABLE ttexporta NO-UNDO
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD tt-exportaID AS INTEGER 
     FIELD ttNFeID      AS INTEGER 
     FIELD UFEmbarq     AS CHARACTER   /*Sigla da UF onde ocorrer† o embarque dos produtos*/
     FIELD xLocEmbarq   AS CHARACTER   /*Local onde ocorrer† o embarque dos produtos*/
.


DEFINE TEMP-TABLE ttforDia NO-UNDO
     FIELD seq          AS INT
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD qtde         AS DECIMAL   /*Quantidade em quilogramas - peso l°quido // v2.0*/
     FIELD tt-canaID    AS INTEGER 
     FIELD ttforDiaID   AS INTEGER 
.


DEFINE TEMP-TABLE ttide NO-UNDO
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD cDV          AS CHARACTER   /*Digito Verificador da Chave de Acesso da NF-e*/
     FIELD cMunFG       AS INTEGER   /*C¢digo do Munic°pio de Ocorrància do Fato Gerador (utilizar a tabela do IBGE)*/
     FIELD cNF          AS INTEGER   /*C¢digo numÇrico que comp‰e a Chave de Acesso. N£mero aleat¢rio gerado pelo emitente para cada NF-e. (tamanho reduzido para 8 d°gitos v2.0)*/
     FIELD cUF          AS CHARACTER   /*C¢digo da UF do emitente do Documento Fiscal. Utilizar a Tabela do IBGE.*/
     FIELD dEmi         AS DATE   /*Data de emiss∆o do Documento Fiscal (AAAA-MM-DD)*/
     FIELD dhCont       AS CHARACTER   /*Informar a data e hora de entrada em contingància contingància no formato AAAA-MM-DDTHH:MM:SS (v.2.0).*/
     FIELD dSaiEnt      AS DATE   /*Data de sa°da ou de entrada da mercadoria / produto (AAAA-MM-DD)*/
     FIELD finNFe       AS CHARACTER   /*Finalidade da emiss∆o da NF-e: 1 - NFe normal 2 - NFe complementar 3 - NFe de ajuste*/
     FIELD hSaiEnt      AS CHARACTER   /*Hora de sa°da ou de entrada da mercadoria / produto (HH:MM:SS) (v2.0)*/
     FIELD indPag       AS CHARACTER   /*Indicador da forma de pagamento: 0 - pagamento Ö vista 1 - pagamento Ö prazo 2 - outros.*/
     FIELD mod_00       AS CHARACTER   /*C¢digo do modelo do Documento Fiscal. Utilizar 55 para identificaá∆o da NF-e, emitida em substituiá∆o ao modelo 1 e 1A.*/
     FIELD natOp        AS CHARACTER   /*Descriá∆o da Natureza da Operaá∆o*/
     FIELD nNF          AS INTEGER   /*N£mero do Documento Fiscal*/
     FIELD procEmi      AS CHARACTER   /*Processo de emiss∆o utilizado com a seguinte codificaá∆o: 0 - emiss∆o de NF-e com aplicativo do contribuinte 1 - emiss∆o de NF-e avulsa pelo Fisco 2 - emiss∆o de NF-e avulsa, pelo contribuinte com seu certificado digital, atravÇs do site do Fisco 3- emiss∆o de NF-e pelo contribuinte com aplicativo fornecido pelo Fisco.*/
     FIELD serie        AS INTEGER   /*SÇrie do Documento Fiscal sÇrie normal 0-889 Avulsa Fisco 890-899 SCAN 900-999*/
     FIELD tpAmb        AS CHARACTER   /*Identificaá∆o do Ambiente: 1 - Produá∆o 2 - Homologaá∆o*/
     FIELD tpEmis       AS CHARACTER   /*Forma de emiss∆o da NF-e 1 - Normal 2 - Contingància FS 3 - Contingància SCAN 4 - Contingància DPEC 5 - Contingància FSDA*/
     FIELD tpImp        AS CHARACTER   /*Formato de impress∆o do DANFE (1 - Retrato 2 - Paisagem)*/
     FIELD tpNF         AS CHARACTER   /*Tipo do Documento Fiscal (0 - entrada 1 - sa°da)*/
     FIELD ttideID      AS INTEGER 
     FIELD ttNFeID      AS INTEGER 
     FIELD verProc      AS CHARACTER   /*vers∆o do aplicativo utilizado no processo de emiss∆o*/
     FIELD xJust        AS CHARACTER   /*Informar a Justificativa da entrada em (v.2.0)*/
     INDEX ixttideID IS PRIMARY UNIQUE ttideID ASCENDING
.


DEFINE TEMP-TABLE ttinfAdic NO-UNDO
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD infAdFisco   AS CHARACTER   /*Informaá‰es adicionais de interesse do Fisco (v2.0)*/
     FIELD infCpl       AS CHARACTER   /*Informaá‰es complementares de interesse do Contribuinte*/
     FIELD tt-infAdicID AS INTEGER 
     FIELD ttNFeID      AS INTEGER 
     INDEX ixtt-infAdicID IS PRIMARY UNIQUE tt-infAdicID ASCENDING
.


DEFINE TEMP-TABLE ttlacres NO-UNDO
     FIELD seq          AS INT
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD nLacre       AS CHARACTER   /*N£mero dos Lacres*/
     FIELD ttlacresID   AS INTEGER 
     FIELD ttvolID      AS INTEGER 
.


DEFINE TEMP-TABLE ttmed NO-UNDO
     FIELD seq          AS INT
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD dFab         AS DATE   /*Data de Fabricaá∆o do medicamento (AAAA-MM-DD)*/
     FIELD dVal         AS DATE   /*Data de validade do medicamento (AAAA-MM-DD)*/
     FIELD nLote        AS CHARACTER   /*N£mero do lote do medicamento*/
     FIELD qLote        AS DECIMAL   /*Quantidade de produtos no lote*/
     FIELD ttdetID      AS INTEGER 
     FIELD ttmedID      AS INTEGER 
     FIELD vPMC         AS DECIMAL   /*Preáo M†ximo ao Consumidor*/
.


DEFINE TEMP-TABLE ttNFe NO-UNDO
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD ttNFeID      AS INTEGER 
     INDEX ixttNFeID IS PRIMARY UNIQUE ttNFeID ASCENDING
.


DEFINE TEMP-TABLE ttNFref NO-UNDO
     FIELD seq          AS INT
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD AAMM         AS CHARACTER   /*AAMM da emiss∆o*/
     FIELD AAMM_00      AS CHARACTER   /*AAMM da emiss∆o da NF de produtor (v2.0)*/
     FIELD CNPJ         AS CHARACTER   /*CNPJ do emitente do documento fiscal referenciado*/
     FIELD CNPJ_00      AS CHARACTER   /*CNPJ do emitente da NF de produtor (v2.0)*/
     FIELD CPF          AS CHARACTER   /*CPF do emitente da NF de produtor (v2.0)*/
     FIELD cUF          AS CHARACTER   /*C¢digo da UF do emitente do Documento Fiscal. Utilizar a Tabela do IBGE.*/
     FIELD cUF_00       AS CHARACTER   /*C¢digo da UF do emitente do Documento FiscalUtilizar a Tabela do IBGE (Anexo IV - Tabela de UF, Munic°pio e Pa°s) (v2.0)*/
     FIELD IE           AS CHARACTER   /*IE do emitente da NF de Produtor (v2.0))*/
     FIELD mod_02       AS CHARACTER   /*C¢digo do modelo do Documento Fiscal. Utilizar 01 para NF modelo 1/1A*/
     FIELD mod_00       AS CHARACTER   /*C¢digo do modelo do Documento Fiscal - utilizar 04 para NF de produtor  ou 01 para NF Avulsa(v2.0)*/
     FIELD mod_01       AS CHARACTER   /*C¢digo do modelo do Documento Fiscal Preencher com "2B", quando se tratar de Cupom Fiscal emitido por m†quina registradora (n∆o ECF), com "2C", quando se tratar de Cupom Fiscal PDV, ou "2D", quando se tratar de Cupom Fiscal (emitido por ECF) (v2.0).*/
     FIELD nCOO         AS CHARACTER   /*Informar o N£mero do Contador de Ordem de Operaá∆o - COO vinculado Ö NF-e (v2.0).*/
     FIELD nECF         AS CHARACTER   /*Informar o n£mero de ordem seqÅencial do ECF que emitiu o Cupom Fiscal vinculado Ö NF-e (v2.0).*/
     FIELD nNF          AS INTEGER   /*N£mero do Documento Fiscal*/
     FIELD nNF_00       AS INTEGER   /*N£mero do Documento Fiscal - 1 - 999999999 - (v2.0)*/
     FIELD refCTe       AS CHARACTER   /*Utilizar esta TAG para referenciar um CT-e emitido anteriormente, vinculada a NF-e atual - (v2.0).*/
     FIELD refNFe       AS CHARACTER   /*Chave de acesso das NF-e referenciadas. Chave de acesso compostas por C¢digo da UF (tabela do IBGE) + AAMM da emiss∆o + CNPJ do Emitente + modelo, sÇrie e n£mero da NF-e Referenciada + C¢digo NumÇrico + DV.*/
     FIELD serie        AS CHARACTER   /*SÇrie do Documento Fiscal, informar zero se inexistente*/
     FIELD serie_00     AS CHARACTER   /*SÇrie do Documento Fiscal, informar zero se inexistentesÇrie (v2.0).*/
     FIELD ttideID      AS INTEGER 
     FIELD ttNFrefID    AS INTEGER 
.


DEFINE TEMP-TABLE ttobsCont NO-UNDO
     FIELD seq          AS INT
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD tt-infAdicID AS INTEGER 
     FIELD ttobsContID  AS INTEGER 
     FIELD xTexto       AS CHARACTER
     FIELD xCampo       AS CHARACTER
.


DEFINE TEMP-TABLE ttobsFisco NO-UNDO
     FIELD seq          AS INT
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD xCampo       AS CHARACTER 
     FIELD tt-infAdicID AS INTEGER 
     FIELD ttobsFiscoID AS INTEGER 
     FIELD xTexto       AS CHARACTER 
.


DEFINE TEMP-TABLE ttprocRef NO-UNDO
     FIELD seq          AS INT
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD indProc      AS CHARACTER   /*Origem do processo, informar com: 0 - SEFAZ 1 - Justiáa Federal 2 - Justiáa Estadual 3 - Secex/RFB 9 - Outros*/
     FIELD nProc        AS CHARACTER   /*Indentificador do processo ou ato concess¢rio*/
     FIELD tt-infAdicID AS INTEGER 
     FIELD ttprocRefID  AS INTEGER 
.


DEFINE TEMP-TABLE ttreboque NO-UNDO
     FIELD seq          AS INT
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD placa        AS CHARACTER   /*Placa do ve°culo*/
     FIELD RNTC         AS CHARACTER   /*Registro Nacional de Transportador de Carga (ANTT)*/
     FIELD ttreboqueID  AS INTEGER 
     FIELD tt-transpID  AS INTEGER 
     FIELD UF           AS CHARACTER   /*Sigla da UF*/
.


DEFINE TEMP-TABLE ttretirada NO-UNDO
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD cMun_01      AS INTEGER   /*C¢digo do munic°pio (utilizar a tabela do IBGE)*/
     FIELD CNPJ_02      AS CHARACTER   /*CNPJ*/
     FIELD CPF_01       AS CHARACTER   /*CPF (v2.0)*/
     FIELD nro_01       AS CHARACTER   /*N£mero*/
     FIELD ttNFeID      AS INTEGER 
     FIELD ttretiradaID AS INTEGER 
     FIELD UF_02        AS CHARACTER   /*Sigla da UF*/
     FIELD xBairro_01   AS CHARACTER   /*Bairro*/
     FIELD xCpl_01      AS CHARACTER   /*Complemento*/
     FIELD xLgr_01      AS CHARACTER   /*Logradouro*/
     FIELD xMun_01      AS CHARACTER   /*Nome do munic°pio*/
.


DEFINE TEMP-TABLE tt-total NO-UNDO
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD ttNFeID      AS INTEGER 
     FIELD tt-totalID   AS INTEGER 
     FIELD vBC_14       AS decimal    /*BC do ICMS*/
     FIELD vBC_15       AS decimal    /*Base de C†lculo do ISS*/
     FIELD vBCIRRF      AS decimal    /*Base de C†lculo do IRRF*/
     FIELD vBCRetPrev   AS decimal    /*Base de C†lculo da Retená∆o da Previdàncica Social*/
     FIELD vBCST_04     AS decimal    /*BC do ICMS ST*/
     FIELD vCOFINS_03   AS decimal    /*Valor do COFINS*/
     FIELD vCOFINS_04   AS decimal    /*Valor do COFINS sobre serviáos*/
     FIELD vDesc_00     AS decimal    /*Valor Total do Desconto*/
     FIELD vFrete_00    AS decimal    /*Valor Total do Frete*/
     FIELD vICMS_05     AS decimal    /*Valor Total do ICMS*/
     FIELD vII_00       AS decimal    /*Valor Total do II*/
     FIELD vIPI_00      AS decimal    /*Valor Total do IPI*/
     FIELD vIRRF        AS decimal    /*Valor Retido de IRRF*/
     FIELD vISS         AS decimal    /*Valor Total do ISS*/
     FIELD vNF          AS decimal    /*Valor Total da NF-e*/
     FIELD vOutro       AS decimal    /*Outras Despesas acess¢rias*/
     FIELD vPIS_03      AS decimal    /*Valor do PIS*/
     FIELD vPIS_04      AS decimal    /*Valor do PIS sobre serviáos*/
     FIELD vProd_00     AS decimal    /*Valor Total dos produtos e serviáos*/
     FIELD vRetCOFINS   AS decimal    /*Valor Retido de COFINS*/
     FIELD vRetCSLL     AS decimal    /*Valor Retido de CSLL*/
     FIELD vRetPIS      AS decimal    /*Valor Retido de PIS*/
     FIELD vRetPrev     AS decimal    /*Valor da Retená∆o da Previdàncica Social*/
     FIELD vSeg_00      AS decimal    /*Valor Total do Seguro*/
     FIELD vServ        AS decimal    /*Valor Total dos Serviáos sob n∆o-incidància ou n∆o tributados pelo ICMS */
     FIELD vST          AS decimal    /*Valor Total do ICMS ST*/
.


DEFINE TEMP-TABLE tt-transp NO-UNDO
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD balsa        AS CHARACTER   /*Identificaá∆o da balsa (v2.0)*/
     FIELD CFOP_00      AS CHARACTER   /*C¢digo Fiscal de Operaá‰es e Prestaá‰es // PL_006f - alterado para permitir somente CFOP de transportes */
     FIELD cMunFG_00    AS INTEGER   /*C¢digo do Munic°pio de Ocorrància do Fato Gerador (utilizar a tabela do IBGE)*/
     FIELD CNPJ         AS CHARACTER   /*CNPJ do transportador*/
     FIELD CPF          AS CHARACTER   /*CPF do transportador*/
     FIELD IE           AS CHARACTER   /*Inscriá∆o Estadual (v2.0)*/
     FIELD modFrete     AS CHARACTER   /*Modalidade do frete 0- Por conta do emitente 1- Por conta do destinat†rio/remetente 2- Por conta de terceiros 9- Sem frete (v2.0)*/
     FIELD pICMSRet     AS DECIMAL   /*Al°quota da Retená∆o*/
     FIELD placa        AS CHARACTER   /*Placa do ve°culo*/
     FIELD RNTC         AS CHARACTER   /*Registro Nacional de Transportador de Carga (ANTT)*/
     FIELD ttNFeID      AS INTEGER 
     FIELD tt-transpID  AS INTEGER 
     FIELD UF           AS CHARACTER   /*Sigla da UF*/
     FIELD UF_00        AS CHARACTER   /*Sigla da UF*/
     FIELD vagao        AS CHARACTER   /*Identificaá∆o do vag∆o (v2.0)*/
     FIELD vBCRet       AS DECIMAL   /*BC da Retená∆o do ICMS*/
     FIELD vICMSRet     AS DECIMAL   /*Valor do ICMS Retido*/
     FIELD vServ_00     AS DECIMAL   /*Valor do Serviáo*/
     FIELD xEnder       AS CHARACTER   /*Endereáo completo*/
     FIELD xMun         AS CHARACTER   /*Nome do mun°cipio*/
     FIELD xNome        AS CHARACTER   /*Raz∆o Social ou nome*/
     INDEX ixtt-transpID IS PRIMARY UNIQUE tt-transpID ASCENDING
.


DEFINE TEMP-TABLE ttvol NO-UNDO
     FIELD seq          AS INT
     FIELD chave        AS CHARACTER FORMAT "x(55)" 
     FIELD esp          AS CHARACTER   /*EspÇcie dos volumes transportados*/
     FIELD marca        AS CHARACTER   /*Marca dos volumes transportados*/
     FIELD nVol         AS CHARACTER   /*Numeraá∆o dos volumes transportados*/
     FIELD pesoB        AS DECIMAL   /*Peso bruto (em kg)*/
     FIELD pesoL        AS DECIMAL   /*Peso l°quido (em kg)*/
     FIELD qVol         AS CHARACTER   /*Quantidade de volumes transportados*/
     FIELD tt-transpID  AS INTEGER 
     FIELD ttvolID      AS INTEGER 
     INDEX ixttvolID IS PRIMARY UNIQUE ttvolID ASCENDING
.

DEFINE TEMP-TABLE ttinfoadic NO-UNDO
     FIELD nomearquivodepos AS CHARACTER
     FIELD estrutura        AS CHARACTER
     FIELD assinatura       AS CHARACTER
     FIELD situacao         AS CHARACTER
     FIELD notaoriginal     AS CHARACTER
     FIELD protocolo        AS CHARACTER
     FIELD chave            AS CHARACTER FORMAT "x(55)"
.

/*LOCAL VARIABLES - END*/

/*PARAMETERS - BEGIN*/
/*PARAMETERS - END*/



DEF TEMP-TABLE tt-nfe003 LIKE nfe003.
DEF TEMP-TABLE tt-nfe004 like nfe004.
DEF TEMP-TABLE tt-nfe001 LIKE nfe001.
DEF TEMP-TABLE tt-nfe021 LIKE nfe021.
DEF TEMP-TABLE tt-nfe002 LIKE nfe002.
DEF TEMP-TABLE tt-nfe005 LIKE nfe005.
DEF TEMP-TABLE tt-nfe013 LIKE nfe013.
DEF TEMP-TABLE tt-nfe009 LIKE nfe009.
DEF TEMP-TABLE tt-nfe010 LIKE nfe010.
DEF TEMP-TABLE tt-nfe011 LIKE nfe011.
DEF TEMP-TABLE tt-nfe012 LIKE nfe012.

def temp-table btt-nfe003 like nfe003.
def temp-table btt-nfe004 like nfe004.
def temp-table btt-nfe001 like nfe001.
def temp-table btt-nfe021 like nfe021.
def temp-table btt-nfe002 like nfe002.
def temp-table btt-nfe005 like nfe005.
def temp-table btt-nfe009 like nfe009.
def temp-table btt-nfe010 like nfe010.
def temp-table btt-nfe011 like nfe011.
def temp-table btt-nfe012 like nfe012.

/* DEF. VARIµVEIS USADAS EM xmlLoadMessageHandlerRec.i */
{xmlinc/xmlLoadMessageHandlerRecDef.i}

/* DEFINE AS VARAIVEIS PARA USO DO xmlLoadGenXmlRec.i */
{xmlinc/xmlLoadGenXmlRecDef.i}


/* DEFINE AS VARIAVEIS PARA USO DO xmlgettranssubsinfo */
{xmlinc/xmlgettranssubsinfo.i}

DEFINE TEMP-TABLE ttStack NO-UNDO
     FIELD ttID AS INTEGER
     FIELD ttPos AS INTEGER
     INDEX tt_id IS PRIMARY UNIQUE
           ttID  ASCENDING.


FUNCTION addStack RETURN INTEGER (INPUT val AS INTEGER).
     DEFINE VAR id AS INTEGER INITIAL 1 NO-UNDO.
     FIND LAST ttStack NO-ERROR.
     IF AVAIL(ttStack) THEN
          id = ttStack.ttID + 1.

     CREATE ttStack.
     ASSIGN ttStack.ttID = id.
     ASSIGN ttStack.ttPos = val.
END FUNCTION.


FUNCTION delStack RETURN INTEGER.
     FIND LAST ttStack NO-ERROR.
     IF AVAIL(ttStack) THEN
          DELETE ttStack.

     FIND LAST ttStack NO-ERROR.
END FUNCTION.


FUNCTION getStack RETURN INTEGER.
     IF AVAIL(ttStack) THEN
          RETURN ttStack.ttPos.
     ELSE
          RETURN 0.
END FUNCTION.


/****** INTERNAL PROCEDURES - BEGIN*/
PROCEDURE PIUpsert:

/*PARAMETERS - BEGIN*/
def input param pArquivo as character no-undo.
/*PARAMETERS - END*/


/*LOCAL VARIABLES - BEGIN*/
DEFINE VAR iId AS INTEGER  NO-UNDO.
/*LOCAL VARIABLES - END*/


/* ******************************************* */
/* *************** BODY - BEGIN ************** */
/* ******************************************* */

empty temp-table ttadi.
empty temp-table ttarma.
empty temp-table ttavulsa.
empty temp-table tt-cana.
empty temp-table ttcobr.
empty temp-table ttcompra.
empty temp-table ttdeduc.
empty temp-table ttdest.
empty temp-table ttdet.
empty temp-table tt-erro.
empty temp-table ttDI.
empty temp-table ttdup.
empty temp-table ttemit.
empty temp-table ttentrega.
empty temp-table ttexporta.
empty temp-table ttforDia.
empty temp-table ttide.
empty temp-table ttinfAdic.
empty temp-table ttlacres.
empty temp-table ttmed.
empty temp-table ttNFe.
empty temp-table ttNFref.
empty temp-table ttobsCont.
empty temp-table ttobsFisco.
empty temp-table ttprocRef.
empty temp-table ttreboque.
empty temp-table ttretirada.
empty temp-table tt-total.
empty temp-table tt-transp.
empty temp-table ttvol.
empty temp-table ttinfoadic.
empty temp-table ttCobr.

/* IF PROGRAM-NAME(3) = "USER-INTERFACE-TRIGGER esp/rep/esre0001.w" OR               */
/*    PROGRAM-NAME(3) = "USER-INTERFACE-TRIGGER esp/rep/esre0001.r" THEN DO:         */
/*                                                                                   */
/*     /*DEFINE VARIABLE hGenXml  AS HANDLE     NO-UNDO.  */                         */
/*     DEFINE VARIABLE hGenXml2 AS HANDLE     NO-UNDO.                               */
/*     DEFINE VARIABLE hXMLOrig AS HANDLE     NO-UNDO.                               */
/*                                                                                   */
/*     /* ***** Instancia o handle ***** */                                          */
/*     RUN xmlutp/ut-genxml.p PERSISTENT SET hGenXml.                                */
/*     RUN xmlutp/ut-genxml.p PERSISTENT SET hGenXml2.                               */
/*                                                                                   */
/*     /* ***** ImportaØ o *****  */                                                 */
/*     FIND FIRST param-global NO-LOCK NO-ERROR.                                     */
/*                                                                                   */
/*     /* ***** LIMPA AS TEMP-TABLES INTERNAS DA API XML ***** */                    */
/*     RUN reset IN hGenXml.                                                         */
/*                                                                                   */
/*     /* ***** SETA VALOR DE ENCODING ***** */ /*utf-8*/                            */
/*     RUN setEncoding IN hGenXml ("ISO-8859-1").                                    */
/*                                                                                   */
/*     /* ***** Le o xml do arquivo ***** */                                         */
/*     RUN loadXMLFromFile   IN hGenXml (INPUT c-arq-xml).                           */
/*                                                                                   */
/*     /* ***** Armazena o xml em um ponteiro ***** */                               */
/*     RUN generateXML IN hGenXML (OUTPUT hXMLOrig).                                 */
/*                                                                                   */
/*     /* ***** LIMPA AS TEMP-TABLES INTERNAS DA API XML ***** */                    */
/*     RUN reset IN hGenXML2.                                                        */
/*                                                                                   */
/*     /* ***** SETA VALOR DE ENCODING ***** */                                      */
/*     RUN setEncoding IN hGenXML2 ("ISO-8859-1").                                   */
/*                                                                                   */
/*     /* ***** Le o xml do arquivo ***** */                                         */
/*     RUN loadxml in hGenXML2 (hXMLOrig).                                           */
/*                                                                                   */
/* END. ELSE DO:                                                                     */
/*                                                                                   */
/*      /* OBTEM A PARTE DA MENSAGEM QUE ESTÊ ABAIXO DO ELEMENTO BusinessContent */  */
/*      RUN getBusinessContent IN hMessageHandler (OUTPUT hBusinessContent).         */
/*                                                                                   */
/*      /* LIMPA AS TEMP-TABLES INTERNAS DA API XML */                               */
/*      RUN reset IN hGenXml.                                                        */
/*                                                                                   */
/*      /* CARREGA A ESTRUTURA FILHA DE BusinessContent */                           */
/*      RUN loadXml IN hGenXml (hBusinessContent).                                   */
/*                                                                                   */
/*      /* ELIMINA A MENSAGEM OBTIDA NO MêTODO getBusinessContent */                 */
/*      DELETE OBJECT hBusinessContent NO-ERROR.                                     */
/*                                                                                   */
/* END.                                                                              */



     CREATE X-DOCUMENT hBusinessContent.
     hBusinessContent:LOAD ("FILE",pArquivo,NO).
     
         RUN xmlutp/ut-genxml.p  PERSISTENT SET hgenxml.
     
     /* LIMPA AS TEMP-TABLES INTERNAS DA API XML */

     RUN RESET IN hGenXml.
     
     /* CARREGA A ESTRUTURA FILHA DE BusinessContent */
     RUN loadXml IN hGenXml (hBusinessContent).
     
     /*     hBusinessContent:save("file", "C:\simone\Desenvolvimento\NF-E Recebimento\\teste.xml").*/

     /* ELIMINA A MENSAGEM OBTIDA NO MêTODO getBusinessContent */
     DELETE OBJECT hBusinessContent.
     
     /* ********* LEITURA DA MENSAGEM - BEGIN ********* */
     addStack(1).
     RUN searchTag IN hGenXml (INPUT "NFe", INPUT getStack(), OUTPUT iId).
     IF iId = ? THEN DO:
         addStack(0).
         RUN searchTag IN hGenXml (INPUT "NFe", INPUT getStack(), OUTPUT iId).
     END.

     if (iId <> ?) THEN DO:
          addStack(iId).

          /*Criacao de valores para manter as relacoes*/
          CREATE ttNFe.
          ASSIGN ttNFe.ttNFeID = iId.

          RUN searchTag IN hGenXml (INPUT "infNFe", INPUT getStack(), OUTPUT iId).
          if (iId <> ?) THEN DO:

               addStack(iId).
               /*Est† duas tag foram colocadas a m∆o, pois o gerador de adapters n∆o interpreta campos no schema definido como atributo*/
               RUN getAttrValue IN hGenXML (INPUT iId, INPUT "versao", OUTPUT c-versao).  /*getAttrValue*/
               RUN getAttrValue IN hGenXML (INPUT iId, INPUT "id",     OUTPUT c-chave-Sefaz).  /*getAttrValue*/
     
               ASSIGN ttNFe.chave = REPLACE(c-chave-Sefaz,"NFE","").

               RUN searchTag IN hGenXml (INPUT "ide", INPUT getStack(), OUTPUT iId).
               if (iId <> ?) THEN DO:
                    addStack(iId).

                         /*Criacao de valores para manter as relacoes*/
                         CREATE ttide.
                         ASSIGN ttide.ttideID = iId.
                         ASSIGN ttide.ttNFeID = ttNFe.ttNFeID
                                ttide.chave   = ttNFe.chave.

                         RUN getSonVal  IN hGenXml (INPUT getStack(), INPUT "cUF",      OUTPUT ttide.cUF).
                         RUN getSonVal  IN hGenXml (INPUT getStack(), INPUT "cNF",      OUTPUT ttide.cNF).
                         RUN getSonVal  IN hGenXml (INPUT getStack(), INPUT "natOp",    OUTPUT ttide.natOp).
                         RUN getSonVal  IN hGenXml (INPUT getStack(), INPUT "indPag",   OUTPUT ttide.indPag).
                         RUN getSonVal  IN hGenXml (INPUT getStack(), INPUT "mod",      OUTPUT ttide.mod_00).
                         RUN getSonVal  IN hGenXml (INPUT getStack(), INPUT "serie",    OUTPUT ttide.serie).
                         RUN getSonVal  IN hGenXml (INPUT getStack(), INPUT "nNF",      OUTPUT ttide.nNF).
                         RUN getSonDate IN hGenXml (INPUT getStack(), INPUT "dEmi",     OUTPUT ttide.dEmi).

                         RUN getSonDateTime IN hGenXml (INPUT getStack(), INPUT "dhEmi", OUTPUT ttide.dEmi, OUTPUT c-time). /*3.1*/
                         RUN getSonDateTime IN hGenXml (INPUT getStack(), INPUT "dhSaiEnt",  OUTPUT ttide.dSaiEnt, OUTPUT ttide.hSaiEnt). /*3.1*/

                         RUN getSonDate IN hGenXml (INPUT getStack(), INPUT "dSaiEnt",  OUTPUT ttide.dSaiEnt).
                         RUN getSonVal  IN hGenXml (INPUT getStack(), INPUT "hSaiEnt",  OUTPUT ttide.hSaiEnt).
                         RUN getSonVal  IN hGenXml (INPUT getStack(), INPUT "tpNF",     OUTPUT ttide.tpNF).
                         RUN getSonVal  IN hGenXml (INPUT getStack(), INPUT "cMunFG",   OUTPUT ttide.cMunFG).

                         RUN searchTag IN hGenXml (INPUT "NFref", INPUT getStack(), OUTPUT iId).
                         ASSIGN idNFref = getStack().
                         RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).
                         DO WHILE c-value = "NFref":

                              addStack(iId).

                              ASSIGN cont-NFref = cont-NFref + 1.

                              /*Criacao de valores para manter as relacoes*/
                              CREATE ttNFref.
                              ASSIGN ttNFref.ttNFrefID = iId.
                              ASSIGN ttNFref.ttideID = ttide.ttideID
                                     ttNFref.chave   = ttide.chave
                                     ttNFref.seq     = cont-NFref.

                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "refNFe", OUTPUT ttNFref.refNFe).
                              RUN searchTag IN hGenXml (INPUT "refNF", INPUT getStack(), OUTPUT iId).
                              if (iId <> ?) THEN DO:
                                   addStack(iId).

                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cUF",   OUTPUT ttNFref.cUF).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "AAMM",  OUTPUT ttNFref.AAMM).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CNPJ",  OUTPUT ttNFref.CNPJ).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "mod",   OUTPUT ttNFref.mod_02).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "serie", OUTPUT ttNFref.serie).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nNF",   OUTPUT ttNFref.nNF).
                                   delStack().
                              END.

                              RUN searchTag IN hGenXml (INPUT "refNFP", INPUT getStack(), OUTPUT iId).
                              if (iId <> ?) THEN DO:
                                   addStack(iId).

                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cUF",   OUTPUT ttNFref.cUF_00).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "AAMM",  OUTPUT ttNFref.AAMM_00).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CNPJ",  OUTPUT ttNFref.CNPJ_00).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CPF",   OUTPUT ttNFref.CPF).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "IE",    OUTPUT ttNFref.IE).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "mod",   OUTPUT ttNFref.mod_00).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "serie", OUTPUT ttNFref.serie_00).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nNF",   OUTPUT ttNFref.nNF_00).
                                   delStack().
                              END.

                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "refCTe", OUTPUT ttNFref.refCTe).
                              RUN searchTag IN hGenXml (INPUT "refECF", INPUT getStack(), OUTPUT iId).
                              if (iId <> ?) THEN DO:
                                   addStack(iId).

                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "mod",  OUTPUT ttNFref.mod_01).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nECF", OUTPUT ttNFref.nECF).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nCOO", OUTPUT ttNFref.nCOO).
                                   delStack().
                              END.

                              ASSIGN iId = getStack().
                              delStack().
                              RUN getNextSonId IN hGenXML (INPUT idNFRef, INPUT iId, OUTPUT iId).
                              RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                         END.
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "tpImp",    OUTPUT ttide.tpImp).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "tpEmis",   OUTPUT ttide.tpEmis).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cDV",      OUTPUT ttide.cDV).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "tpAmb",    OUTPUT ttide.tpAmb).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "finNFe",   OUTPUT ttide.finNFe).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "procEmi",  OUTPUT ttide.procEmi).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "verProc",  OUTPUT ttide.verProc).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "dhCont",   OUTPUT ttide.dhCont).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xJust",    OUTPUT ttide.xJust).
                    delStack().

               END.
               RUN searchTag IN hGenXml (INPUT "emit", INPUT getStack(), OUTPUT iId).

               if (iId <> ?) THEN DO:
                    addStack(iId).

                         /*Criacao de valores para manter as relacoes*/
                         CREATE ttemit.
                         ASSIGN ttemit.emitID = iId.
                         ASSIGN ttemit.ttNFeID = ttNFe.ttNFeID
                                ttemit.chave   = ttNFe.chave.

                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CNPJ",      OUTPUT ttemit.CNPJ).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CPF",       OUTPUT ttemit.CPF).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xNome",     OUTPUT ttemit.xNome).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xFant",     OUTPUT ttemit.xFant).

                         RUN searchTag IN hGenXml (INPUT "enderEmit", INPUT getStack(), OUTPUT iId).
                         if (iId <> ?) THEN DO:

                              addStack(iId).

                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xLgr",    OUTPUT ttemit.xLgr).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nro",     OUTPUT ttemit.nro).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xCpl",    OUTPUT ttemit.xCpl).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xBairro", OUTPUT ttemit.xBairro).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cMun",    OUTPUT ttemit.cMun).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xMun",    OUTPUT ttemit.xMun).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "UF",      OUTPUT ttemit.UF).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CEP",     OUTPUT ttemit.CEP).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cPais",   OUTPUT ttemit.cPais).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xPais",   OUTPUT ttemit.xPais).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "fone",    OUTPUT ttemit.fone).
                              delStack().
                         END.

                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "IE",   OUTPUT ttemit.IE).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "IEST", OUTPUT ttemit.IEST).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "IM",   OUTPUT ttemit.IM).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CNAE", OUTPUT ttemit.CNAE).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CRT",  OUTPUT ttemit.CRT).
                    delStack().

               END.
               RUN searchTag IN hGenXml (INPUT "avulsa", INPUT getStack(), OUTPUT iId).
               if (iId <> ?) THEN DO:
                    addStack(iId).

                         /*Criacao de valores para manter as relacoes*/
                         CREATE ttavulsa.
                         ASSIGN ttavulsa.ttavulsaID = iId.
                         ASSIGN ttavulsa.ttNFeID = ttNFe.ttNFeID
                                ttavulsa.chave   = ttNFe.chave.

                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CNPJ",     OUTPUT ttavulsa.CNPJ_00).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xOrgao",   OUTPUT ttavulsa.xOrgao).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "matr",     OUTPUT ttavulsa.matr).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xAgente",  OUTPUT ttavulsa.xAgente).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "fone",     OUTPUT ttavulsa.fone_00).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "UF",       OUTPUT ttavulsa.UF_00).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nDAR",     OUTPUT ttavulsa.nDAR).
                         RUN getSonDate IN hGenXml (INPUT getStack(), INPUT "dEmi",     OUTPUT ttavulsa.dEmi_00).
                         RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vDAR",     OUTPUT ttavulsa.vDAR).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "repEmi",   OUTPUT ttavulsa.repEmi).
                         RUN getSonDate IN hGenXml (INPUT getStack(), INPUT "dPag",     OUTPUT ttavulsa.dPag).
                    delStack().

               END.
               RUN searchTag IN hGenXml (INPUT "dest", INPUT getStack(), OUTPUT iId).
               if (iId <> ?) THEN DO:
                    addStack(iId).

                         /*Criacao de valores para manter as relacoes*/
                         CREATE ttdest.
                         ASSIGN ttdest.ttdestID = iId.
                         ASSIGN ttdest.ttNFeID = ttNFe.ttNFeID
                                ttdest.chave   = ttNFe.chave.

                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CNPJ",      OUTPUT ttdest.CNPJ_01).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CPF",       OUTPUT ttdest.CPF_00).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xNome",     OUTPUT ttdest.xNome_00).
                         RUN searchTag IN hGenXml (INPUT "enderDest", INPUT getStack(), OUTPUT iId).
                         if (iId <> ?) THEN DO:
                              addStack(iId).

                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xLgr",    OUTPUT ttdest.xLgr_00).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nro",     OUTPUT ttdest.nro_00).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xCpl",    OUTPUT ttdest.xCpl_00).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xBairro", OUTPUT ttdest.xBairro_00).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cMun",    OUTPUT ttdest.cMun_00).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xMun",    OUTPUT ttdest.xMun_00).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "UF",      OUTPUT ttdest.UF_01).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CEP",     OUTPUT ttdest.CEP_00).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cPais",   OUTPUT ttdest.cPais_00).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xPais",   OUTPUT ttdest.xPais_00).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "fone",    OUTPUT ttdest.fone_01).
                              delStack().
                         END.

                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "IE",    OUTPUT ttdest.IE_00).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "ISUF",  OUTPUT ttdest.ISUF).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "email", OUTPUT ttdest.email).
                    delStack().

               END.
               RUN searchTag IN hGenXml (INPUT "retirada", INPUT getStack(), OUTPUT iId).
               if (iId <> ?) THEN DO:
                    addStack(iId).

                         /*Criacao de valores para manter as relacoes*/
                         CREATE ttretirada.
                         ASSIGN ttretirada.ttretiradaID = iId.
                         ASSIGN ttretirada.ttNFeID = ttNFe.ttNFeID
                                ttretirada.chave   = ttNFe.chave.

                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CNPJ",     OUTPUT ttretirada.CNPJ_02).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CPF",      OUTPUT ttretirada.CPF_01).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xLgr",     OUTPUT ttretirada.xLgr_01).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nro",      OUTPUT ttretirada.nro_01).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xCpl",     OUTPUT ttretirada.xCpl_01).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xBairro",  OUTPUT ttretirada.xBairro_01).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cMun",     OUTPUT ttretirada.cMun_01).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xMun",     OUTPUT ttretirada.xMun_01).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "UF",       OUTPUT ttretirada.UF_02).
                    delStack().

               END.
               RUN searchTag IN hGenXml (INPUT "entrega", INPUT getStack(), OUTPUT iId).
               if (iId <> ?) THEN DO:
                    addStack(iId).

                         /*Criacao de valores para manter as relacoes*/
                         CREATE ttentrega.
                         ASSIGN ttentrega.ttentregaID = iId.
                         ASSIGN ttentrega.ttNFeID = ttNFe.ttNFeID
                                ttentrega.chave   = ttNFe.chave.

                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CNPJ",     OUTPUT ttentrega.CNPJ_03).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CPF",      OUTPUT ttentrega.CPF_02).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xLgr",     OUTPUT ttentrega.xLgr_02).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nro",      OUTPUT ttentrega.nro_02).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xCpl",     OUTPUT ttentrega.xCpl_02).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xBairro",  OUTPUT ttentrega.xBairro_02).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cMun",     OUTPUT ttentrega.cMun_02).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xMun",     OUTPUT ttentrega.xMun_02).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "UF",       OUTPUT ttentrega.UF_03).
                    delStack().

               END.


               RUN searchTag IN hGenXml (INPUT "det", INPUT getStack(), OUTPUT iId).
               ASSIGN idDet = getStack().
               RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).
               DO WHILE c-value = "det":

                    addStack(iId).

                    ASSIGN cont-det = cont-det + 1.

                    /*Criacao de valores para manter as relacoes*/
                    CREATE ttdet.
                    ASSIGN ttdet.ttdetID = iId.
                    ASSIGN ttdet.ttNFeID = ttNFe.ttNFeID
                           ttdet.chave   = ttNFe.chave
                           ttdet.seq     = cont-det.

                    RUN getAttrValue IN hGenXML (INPUT getStack(), INPUT "nItem", OUTPUT ttdet.nitem).  /*getAttrValue*/

                    RUN searchTag IN hGenXml (INPUT "prod", INPUT getStack(), OUTPUT iId).
                    if (iId <> ?) THEN DO:
                         addStack(iId).

                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cProd",    OUTPUT ttdet.cProd).
                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cEAN",     OUTPUT ttdet.cEAN).
                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xProd",    OUTPUT ttdet.xProd).
                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "NCM",      OUTPUT ttdet.NCM).
                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "EXTIPI",   OUTPUT ttdet.EXTIPI).
                              /*Adaptaá∆o layout 1.10*/
                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "genero",     OUTPUT ttdet.genero).
                              /*Fim Adaptaá∆o layout 1.10*/
                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CFOP",     OUTPUT ttdet.CFOP).
                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "uCom",     OUTPUT ttdet.uCom).
                              RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qCom",     OUTPUT ttdet.qCom).
                              RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vUnCom",   OUTPUT ttdet.vUnCom).
                              RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vProd",    OUTPUT ttdet.vProd).
                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cEANTrib", OUTPUT ttdet.cEANTrib).
                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "uTrib",    OUTPUT ttdet.uTrib).
                              RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qTrib",    OUTPUT ttdet.qTrib).
                              RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vUnTrib",  OUTPUT ttdet.vUnTrib).
                              RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vFrete",   OUTPUT ttdet.vFrete).
                              RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vSeg",     OUTPUT ttdet.vSeg).
                              RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vDesc",    OUTPUT ttdet.vDesc).
                              RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vOutro",   OUTPUT ttdet.vOutro).
                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "indTot",   OUTPUT ttdet.indTot).


                              RUN searchTag IN hGenXml (INPUT "DI", INPUT getStack(), OUTPUT iId).
                              ASSIGN idDI = getStack().
                              RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).
                              DO WHILE c-value = "DI":

                                   addStack(iId).

                                   ASSIGN cont-DI = cont-DI + 1.

                                   /*Criacao de valores para manter as relacoes*/
                                   CREATE ttDI.
                                   ASSIGN ttDI.ttDIID = iId.
                                   ASSIGN ttDI.ttdetID = ttdet.ttdetID
                                          ttDI.chave   = ttdet.chave
                                          ttDI.seq     = cont-DI.

                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nDI",         OUTPUT ttDI.nDI).
                                   RUN getSonDate IN hGenXml (INPUT getStack(), INPUT "dDI",         OUTPUT ttDI.dDI).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xLocDesemb",  OUTPUT ttDI.xLocDesemb).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "UFDesemb",    OUTPUT ttDI.UFDesemb).
                                   RUN getSonDate IN hGenXml (INPUT getStack(), INPUT "dDesemb",     OUTPUT ttDI.dDesemb).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cExportador", OUTPUT ttDI.cExportador).


                                   RUN searchTag IN hGenXml (INPUT "adi", INPUT getStack(), OUTPUT iId).
                                   ASSIGN idadi = getStack().
                                   RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value2).
                                   DO WHILE c-value2 = "adi":

                                        addStack(iId).

                                        ASSIGN cont-adi = cont-adi + 1.

                                        /*Criacao de valores para manter as relacoes*/
                                        CREATE ttadi.
                                        ASSIGN ttadi.ttadiID = iId.
                                        ASSIGN ttadi.ttDIID = ttDI.ttDIID
                                               ttadi.chave  = ttDI.chave
                                               ttadi.seq    = cont-adi.

                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nAdicao",       OUTPUT ttadi.nAdicao).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nSeqAdic",      OUTPUT ttadi.nSeqAdic).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cFabricante",   OUTPUT ttadi.cFabricante).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vDescDI",       OUTPUT ttadi.vDescDI).

                                        delStack().
                                        RUN getNextSonId IN hGenXML (INPUT idadi, INPUT iId, OUTPUT iId).
                                        RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value2).

                                   END.
                                   ASSIGN iId = getStack().
                                   delStack().
                                   RUN getNextSonId IN hGenXML (INPUT idDI, INPUT iId, OUTPUT iId).
                                   RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                              END.

                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xPed",     OUTPUT ttdet.xPed).
                              RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nItemPed", OUTPUT ttdet.nItemPed).

                              
                              RUN searchTag IN hGenXml (INPUT "veicProd", INPUT getStack(), OUTPUT iId).
                              if (iId <> ?) THEN DO:
                                   addStack(iId).

                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "tpOp",          OUTPUT ttdet.tpOp).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "chassi",        OUTPUT ttdet.chassi).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cCor",          OUTPUT ttdet.cCor).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xCor",          OUTPUT ttdet.xCor).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "pot",           OUTPUT ttdet.pot).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cilin",         OUTPUT ttdet.cilin).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "pesoL",         OUTPUT ttdet.pesoL).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "pesoB",         OUTPUT ttdet.pesoB).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nSerie",        OUTPUT ttdet.nSerie).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "tpComb",        OUTPUT ttdet.tpComb).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nMotor",        OUTPUT ttdet.nMotor).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CMT",           OUTPUT ttdet.CMT).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "dist",          OUTPUT ttdet.dist).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "anoMod",        OUTPUT ttdet.anoMod).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "anoFab",        OUTPUT ttdet.anoFab).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "tpPint",        OUTPUT ttdet.tpPint).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "tpVeic",        OUTPUT ttdet.tpVeic).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "espVeic",       OUTPUT ttdet.espVeic).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "VIN",           OUTPUT ttdet.VIN).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "condVeic",      OUTPUT ttdet.condVeic).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cMod",          OUTPUT ttdet.cMod).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cCorDENATRAN",  OUTPUT ttdet.cCorDENATRAN).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "lota",          OUTPUT ttdet.lota).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "tpRest",        OUTPUT ttdet.tpRest).
                                   delStack().
                              END.

                              /* Adaptaá∆o para o funcionamento do layout 1.10*/
                              RUN searchTag IN hGenXml (INPUT "veic", INPUT getStack(), OUTPUT iId).
                              if (iId <> ?) THEN DO:
                                   addStack(iId).

                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "tpOp",         OUTPUT ttdet.tpOp).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "chassi",       OUTPUT ttdet.chassi).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cCor",         OUTPUT ttdet.cCor).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xCor",         OUTPUT ttdet.xCor).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "pot",          OUTPUT ttdet.pot).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CM3",          OUTPUT ttdet.CM3).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "pesoL",        OUTPUT ttdet.pesoL).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "pesoB",        OUTPUT ttdet.pesoB).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nSerie",       OUTPUT ttdet.nSerie).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "tpComb",       OUTPUT ttdet.tpComb).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nMotor",       OUTPUT ttdet.nMotor).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CMKG",         OUTPUT ttdet.CMKG).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "dist",         OUTPUT ttdet.dist).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "RENAVAM",      OUTPUT ttdet.RENAVAM).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "anoMod",       OUTPUT ttdet.anoMod).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "anoFab",       OUTPUT ttdet.anoFab).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "tpPint",       OUTPUT ttdet.tpPint).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "tpVeic",       OUTPUT ttdet.tpVeic).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "espVeic",      OUTPUT ttdet.espVeic).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "VIN",          OUTPUT ttdet.VIN).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "condVeic",     OUTPUT ttdet.condVeic).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cMod",         OUTPUT ttdet.cMod).
                                   delStack().
                              END.
                              /*Fim Adaptaá∆o para o funcionamento do layout 1.10*/


                              RUN searchTag IN hGenXml (INPUT "med", INPUT getStack(), OUTPUT iId).
                              ASSIGN idmed = getStack().
                              RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).
                              DO WHILE c-value = "med":

                                   addStack(iId).

                                   ASSIGN cont-med = cont-med + 1.

                                   /*Criacao de valores para manter as relacoes*/
                                   CREATE ttmed.
                                   ASSIGN ttmed.ttmedID = iId.
                                   ASSIGN ttmed.ttdetID = ttdet.ttdetID
                                          ttmed.chave   = ttdet.chave
                                          ttmed.seq     = cont-med.

                                   RUN getSonVal  IN hGenXml (INPUT getStack(), INPUT "nLote", OUTPUT ttmed.nLote).
                                   RUN getSonDec  IN hGenXml (INPUT getStack(), INPUT "qLote", OUTPUT ttmed.qLote).
                                   RUN getSonDate IN hGenXml (INPUT getStack(), INPUT "dFab",  OUTPUT ttmed.dFab).
                                   RUN getSonDate IN hGenXml (INPUT getStack(), INPUT "dVal",  OUTPUT ttmed.dVal).
                                   RUN getSonVal  IN hGenXml (INPUT getStack(), INPUT "vPMC",  OUTPUT ttmed.vPMC).

                                   ASSIGN iId = getStack().
                                   delStack().
                                   RUN getNextSonId IN hGenXML (INPUT idmed, INPUT iId, OUTPUT iId).
                                   RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                              END.

                              RUN searchTag IN hGenXml (INPUT "arma", INPUT getStack(), OUTPUT iId).
                              ASSIGN idarma = getStack().
                              RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).
                              DO WHILE c-value = "arma":
                              
                                   addStack(iId).

                                   ASSIGN cont-arma = cont-arma + 1.

                                   /*Criacao de valores para manter as relacoes*/
                                   CREATE ttarma.
                                   ASSIGN ttarma.ttarmaID = iId.
                                   ASSIGN ttarma.ttdetID = ttdet.ttdetID
                                          ttarma.chave   = ttdet.chave
                                          ttarma.seq     = cont-arma.

                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "tpArma", OUTPUT ttarma.tpArma).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nSerie", OUTPUT ttarma.nSerie).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nCano",  OUTPUT ttarma.nCano).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "descr",  OUTPUT ttarma.descr).

                                   ASSIGN iId = getStack().
                                   delStack().
                                   RUN getNextSonId IN hGenXML (INPUT idarma, INPUT iId, OUTPUT iId).
                                   RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                              END.
                              RUN searchTag IN hGenXml (INPUT "comb", INPUT getStack(), OUTPUT iId).
                              if (iId <> ?) THEN DO:
                                   addStack(iId).

                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cProdANP", OUTPUT ttdet.cProdANP).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CODIF",    OUTPUT ttdet.CODIF).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qTemp",    OUTPUT ttdet.qTemp).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "UFCons",   OUTPUT ttdet.UFCons).

                                        RUN searchTag IN hGenXml (INPUT "CIDE", INPUT getStack(),     OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qBCProd",   OUTPUT ttdet.qBCProd).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vAliqProd", OUTPUT ttdet.vAliqProd).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vCIDE",     OUTPUT ttdet.vCIDE).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMSComb", INPUT getStack(), OUTPUT iId).
                                     if (iId <> ?) THEN DO:
                                          addStack(iId).

                                               RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCICMS",    OUTPUT ttdet.vBCICMS).
                                               RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMS",      OUTPUT ttdet.vICMS).
                                               RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCICMSST",  OUTPUT ttdet.vBCICMSST).
                                               RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSST",    OUTPUT ttdet.vICMSST).
                                          delStack().
                                     END.
                               
                                     /* Adaptaá∆o para o funcionamento do layout 1.10*/
                                     RUN searchTag IN hGenXml (INPUT "ICMSInter", INPUT getStack(), OUTPUT iId).
                                     if (iId <> ?) THEN DO:
                                          addStack(iId).

                                               RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCICMSSTDest", OUTPUT ttdet.vBCICMSSTDest).
                                               RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSSTDest",   OUTPUT ttdet.vICMSSTDest).
                                          delStack().
                                     END.

                                     RUN searchTag IN hGenXml (INPUT "ICMSCons", INPUT getStack(), OUTPUT iId).
                                     if (iId <> ?) THEN DO:
                                          addStack(iId).

                                               RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCICMSSTCons",  OUTPUT ttdet.vBCICMSSTCons).
                                               RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSSTCons",    OUTPUT ttdet.vICMSSTCons).
                                               RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "UFCons",         OUTPUT ttdet.UFCons).
                                          delStack().
                                     END.
                                     /* FIM Adaptaá∆o para o funcionamento do layout 1.10*/

                                   delStack().
                              END.

                         delStack().
                    END.

                    RUN searchTag IN hGenXml (INPUT "imposto", INPUT getStack(), OUTPUT iId).
                    if (iId <> ?) THEN DO:
                         addStack(iId).

                              RUN searchTag IN hGenXml (INPUT "ICMS", INPUT getStack(), OUTPUT iId).
                              if (iId <> ?) THEN DO:
                                   addStack(iId).

                                        RUN searchTag IN hGenXml (INPUT "ICMS00", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",  OUTPUT ttdet.orig).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",   OUTPUT ttdet.CST).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBC", OUTPUT ttdet.modBC).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",   OUTPUT ttdet.vBC).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMS", OUTPUT ttdet.pICMS).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMS", OUTPUT ttdet.vICMS).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMS10", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",     OUTPUT ttdet.orig_00).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",      OUTPUT ttdet.CST_00).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBC",    OUTPUT ttdet.modBC_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",      OUTPUT ttdet.vBC_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMS",    OUTPUT ttdet.pICMS_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMS",    OUTPUT ttdet.vICMS_00).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBCST",  OUTPUT ttdet.modBCST).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pMVAST",   OUTPUT ttdet.pMVAST).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pRedBCST", OUTPUT ttdet.pRedBCST).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCST",    OUTPUT ttdet.vBCST).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMSST",  OUTPUT ttdet.pICMSST).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSST",  OUTPUT ttdet.vICMSST).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMS20", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",    OUTPUT ttdet.orig_01).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",     OUTPUT ttdet.CST_01).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBC",   OUTPUT ttdet.modBC_01).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pRedBC",  OUTPUT ttdet.pRedBC).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",     OUTPUT ttdet.vBC_01).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMS",   OUTPUT ttdet.pICMS_01).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMS",   OUTPUT ttdet.vICMS_01).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMS30", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",     OUTPUT ttdet.orig_02).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",      OUTPUT ttdet.CST_02).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBCST",  OUTPUT ttdet.modBCST_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pMVAST",   OUTPUT ttdet.pMVAST_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pRedBCST", OUTPUT ttdet.pRedBCST_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCST",    OUTPUT ttdet.vBCST_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMSST",  OUTPUT ttdet.pICMSST_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSST",  OUTPUT ttdet.vICMSST_00).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMS40", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",        OUTPUT ttdet.orig_03).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",         OUTPUT ttdet.CST_03).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMS",       OUTPUT ttdet.vICMS_05).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "motDesICMS",  OUTPUT ttdet.motDesICMS).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMS51", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",    OUTPUT ttdet.orig_04).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",     OUTPUT ttdet.CST_04).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBC",   OUTPUT ttdet.modBC_02).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pRedBC",  OUTPUT ttdet.pRedBC_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",     OUTPUT ttdet.vBC_02).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMS",   OUTPUT ttdet.pICMS_02).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMS",   OUTPUT ttdet.vICMS_02).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMS60", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",       OUTPUT ttdet.orig_05).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",        OUTPUT ttdet.CST_05).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCSTRet",   OUTPUT ttdet.vBCSTRet).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSSTRet", OUTPUT ttdet.vICMSSTRet).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMS70", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).
                                                                                                               
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",     OUTPUT ttdet.orig_06).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",      OUTPUT ttdet.CST_06).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBC",    OUTPUT ttdet.modBC_03).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pRedBC",   OUTPUT ttdet.pRedBC_01).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",      OUTPUT ttdet.vBC_03).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMS",    OUTPUT ttdet.pICMS_03).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMS",    OUTPUT ttdet.vICMS_03).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBCST",  OUTPUT ttdet.modBCST_01).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pMVAST",   OUTPUT ttdet.pMVAST_01).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pRedBCST", OUTPUT ttdet.pRedBCST_01).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCST",    OUTPUT ttdet.vBCST_02).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMSST",  OUTPUT ttdet.pICMSST_01).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSST",  OUTPUT ttdet.vICMSST_02).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMS90", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",     OUTPUT ttdet.orig_07).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",      OUTPUT ttdet.CST_07).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBC",    OUTPUT ttdet.modBC_04).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",      OUTPUT ttdet.vBC_04).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pRedBC",   OUTPUT ttdet.pRedBC_02).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMS",    OUTPUT ttdet.pICMS_04).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMS",    OUTPUT ttdet.vICMS_04).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBCST",  OUTPUT ttdet.modBCST_02).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pMVAST",   OUTPUT ttdet.pMVAST_02).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pRedBCST", OUTPUT ttdet.pRedBCST_02).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCST",    OUTPUT ttdet.vBCST_03).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMSST",  OUTPUT ttdet.pICMSST_02).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSST",  OUTPUT ttdet.vICMSST_03).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMSPart", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",     OUTPUT ttdet.orig_08).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",      OUTPUT ttdet.CST_16).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBC",    OUTPUT ttdet.modBC_05).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",      OUTPUT ttdet.vBC_14).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pRedBC",   OUTPUT ttdet.pRedBC_03).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMS",    OUTPUT ttdet.pICMS_05).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMS",    OUTPUT ttdet.vICMS_06).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBCST",  OUTPUT ttdet.modBCST_03).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pMVAST",   OUTPUT ttdet.pMVAST_03).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pRedBCST", OUTPUT ttdet.pRedBCST_03).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCST",    OUTPUT ttdet.vBCST_07).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMSST",  OUTPUT ttdet.pICMSST_03).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSST",  OUTPUT ttdet.vICMSST_07).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pBCOp",    OUTPUT ttdet.pBCOp).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "UFST",     OUTPUT ttdet.UFST).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMSST", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",        OUTPUT ttdet.orig_09).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",         OUTPUT ttdet.CST_17).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCSTRet",    OUTPUT ttdet.vBCSTRet_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSSTRet",  OUTPUT ttdet.vICMSSTRet_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCSTDest",   OUTPUT ttdet.vBCSTDest).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSSTDest", OUTPUT ttdet.vICMSSTDest_00).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMSSN101", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",        OUTPUT ttdet.orig_10).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CSOSN",       OUTPUT ttdet.CSOSN).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pCredSN",     OUTPUT ttdet.pCredSN).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vCredICMSSN", OUTPUT ttdet.vCredICMSSN).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMSSN102", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",  OUTPUT ttdet.orig_11).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CSOSN", OUTPUT ttdet.CSOSN_00).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMSSN201", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",        OUTPUT ttdet.orig_12).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CSOSN",       OUTPUT ttdet.CSOSN_01).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBCST",     OUTPUT ttdet.modBCST_04).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pMVAST",      OUTPUT ttdet.pMVAST_04).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pRedBCST",    OUTPUT ttdet.pRedBCST_04).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCST",       OUTPUT ttdet.vBCST_04).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMSST",     OUTPUT ttdet.pICMSST_04).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSST",     OUTPUT ttdet.vICMSST_04).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pCredSN",     OUTPUT ttdet.pCredSN_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vCredICMSSN", OUTPUT ttdet.vCredICMSSN_00).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMSSN202", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",        OUTPUT ttdet.orig_13).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CSOSN",       OUTPUT ttdet.CSOSN_02).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBCST",     OUTPUT ttdet.modBCST_05).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pMVAST",      OUTPUT ttdet.pMVAST_05).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pRedBCST",    OUTPUT ttdet.pRedBCST_05).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCST",       OUTPUT ttdet.vBCST_05).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMSST",     OUTPUT ttdet.pICMSST_05).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSST",     OUTPUT ttdet.vICMSST_05).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMSSN500", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",        OUTPUT ttdet.orig_14).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CSOSN",       OUTPUT ttdet.CSOSN_03).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCSTRet",    OUTPUT ttdet.vBCSTRet_01).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSSTRet",  OUTPUT ttdet.vICMSSTRet_01).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "ICMSSN900", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "orig",        OUTPUT ttdet.orig_15).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CSOSN",       OUTPUT ttdet.CSOSN_04).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBC",       OUTPUT ttdet.modBC_06).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",         OUTPUT ttdet.vBC_15).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pRedBC",      OUTPUT ttdet.pRedBC_04).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMS",       OUTPUT ttdet.pICMS_06).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMS",       OUTPUT ttdet.vICMS_07).
                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modBCST",     OUTPUT ttdet.modBCST_06).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pMVAST",      OUTPUT ttdet.pMVAST_06).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pRedBCST",    OUTPUT ttdet.pRedBCST_06).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCST",       OUTPUT ttdet.vBCST_06).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMSST",     OUTPUT ttdet.pICMSST_06).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSST",     OUTPUT ttdet.vICMSST_06).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pCredSN",     OUTPUT ttdet.pCredSN_01).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vCredICMSSN", OUTPUT ttdet.vCredICMSSN_01).
                                             delStack().
                                        END.

                                   delStack().
                              END.

                              RUN searchTag IN hGenXml (INPUT "IPI", INPUT getStack(), OUTPUT iId).
                              if (iId <> ?) THEN DO:
                                   addStack(iId).

                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "clEnq",     OUTPUT ttdet.clEnq).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CNPJProd",  OUTPUT ttdet.CNPJProd).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cSelo",     OUTPUT ttdet.cSelo).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "qSelo",     OUTPUT ttdet.qSelo).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cEnq",      OUTPUT ttdet.cEnq).
                                        RUN searchTag IN hGenXml (INPUT "IPITrib", INPUT getStack(),   OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",   OUTPUT ttdet.CSTIPITrib).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",   OUTPUT ttdet.vBC_05).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pIPI",  OUTPUT ttdet.pIPI).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qUnid", OUTPUT ttdet.qUnid).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vUnid", OUTPUT ttdet.vUnid).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vIPI",  OUTPUT ttdet.vIPI).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "IPINT", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST", OUTPUT ttdet.CSTIPINT).
                                             delStack().
                                        END.

                                   delStack().
                              END.

                              RUN searchTag IN hGenXml (INPUT "II", INPUT getStack(), OUTPUT iId).
                              if (iId <> ?) THEN DO:
                                   addStack(iId).

                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",       OUTPUT ttdet.vBC_06).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vDespAdu",  OUTPUT ttdet.vDespAdu).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vII",       OUTPUT ttdet.vII).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vIOF",      OUTPUT ttdet.vIOF).
                                   delStack().
                              END.

                              RUN searchTag IN hGenXml (INPUT "ISSQN", INPUT getStack(), OUTPUT iId).
                              if (iId <> ?) THEN DO:
                                   addStack(iId).

                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",       OUTPUT ttdet.vBC_13).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vAliq",     OUTPUT ttdet.vAliq).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vISSQN",    OUTPUT ttdet.vISSQN).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cMunFG",    OUTPUT ttdet.cMunFG).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cListServ", OUTPUT ttdet.cListServ).
                                        RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cSitTrib",  OUTPUT ttdet.cSitTrib).
                                   delStack().
                              END.

                              RUN searchTag IN hGenXml (INPUT "PIS", INPUT getStack(), OUTPUT iId).
                              if (iId <> ?) THEN DO:
                                   addStack(iId).

                                        RUN searchTag IN hGenXml (INPUT "PISAliq", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",  OUTPUT ttdet.CST_08).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",  OUTPUT ttdet.vBC_07).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pPIS", OUTPUT ttdet.pPIS).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vPIS", OUTPUT ttdet.vPIS).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "PISQtde", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",       OUTPUT ttdet.CST_09).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qBCProd",   OUTPUT ttdet.qBCProd).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vAliqProd", OUTPUT ttdet.vAliqProd).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vPIS",      OUTPUT ttdet.vPIS_00).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "PISNT", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST", OUTPUT ttdet.CST_10).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "PISOutr", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",         OUTPUT ttdet.CST_11).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",         OUTPUT ttdet.vBC_08).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pPIS",        OUTPUT ttdet.pPIS_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qBCProd",     OUTPUT ttdet.qBCProd_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vAliqProd",   OUTPUT ttdet.vAliqProd_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vPIS",        OUTPUT ttdet.vPIS_01).
                                             delStack().
                                        END.

                                   delStack().
                              END.

                              RUN searchTag IN hGenXml (INPUT "PISST", INPUT getStack(), OUTPUT iId).
                              if (iId <> ?) THEN DO:
                                   addStack(iId).

                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",       OUTPUT ttdet.vBC_09).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pPIS",      OUTPUT ttdet.pPIS_01).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qBCProd",   OUTPUT ttdet.qBCProd_01).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vAliqProd", OUTPUT ttdet.vAliqProd_01).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vPIS",      OUTPUT ttdet.vPIS_02).
                                   delStack().
                              END.

                              RUN searchTag IN hGenXml (INPUT "COFINS", INPUT getStack(), OUTPUT iId).
                              if (iId <> ?) THEN DO:
                                   addStack(iId).

                                        RUN searchTag IN hGenXml (INPUT "COFINSAliq", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",     OUTPUT ttdet.CST_12).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",     OUTPUT ttdet.vBC_10).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pCOFINS", OUTPUT ttdet.pCOFINS).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vCOFINS", OUTPUT ttdet.vCOFINS).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "COFINSQtde", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",       OUTPUT ttdet.CST_13).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qBCProd",   OUTPUT ttdet.qBCProd_02).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vAliqProd", OUTPUT ttdet.vAliqProd_02).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vCOFINS",   OUTPUT ttdet.vCOFINS_00).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "COFINSNT", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST", OUTPUT ttdet.CST_14).
                                             delStack().
                                        END.

                                        RUN searchTag IN hGenXml (INPUT "COFINSOutr", INPUT getStack(), OUTPUT iId).
                                        if (iId <> ?) THEN DO:
                                             addStack(iId).

                                                  RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CST",         OUTPUT ttdet.CST_15).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",         OUTPUT ttdet.vBC_11).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pCOFINS",     OUTPUT ttdet.pCOFINS_00).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qBCProd",     OUTPUT ttdet.qBCProd_03).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vAliqProd",   OUTPUT ttdet.vAliqProd_03).
                                                  RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vCOFINS",     OUTPUT ttdet.vCOFINS_01).
                                             delStack().
                                        END.

                                   delStack().
                              END.

                              RUN searchTag IN hGenXml (INPUT "COFINSST", INPUT getStack(), OUTPUT iId).
                              if (iId <> ?) THEN DO:
                                   addStack(iId).

                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",       OUTPUT ttdet.vBC_12).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pCOFINS",   OUTPUT ttdet.pCOFINS_01).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qBCProd",   OUTPUT ttdet.qBCProd_04).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vAliqProd", OUTPUT ttdet.vAliqProd_04).
                                        RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vCOFINS",   OUTPUT ttdet.vCOFINS_02).
                                   delStack().
                              END.

                         delStack().
                    END.

                    RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "infAdProd", OUTPUT ttdet.infAdProd).
                    ASSIGN iId = getStack().
                    delStack().
               
                    RUN getNextSonId IN hGenXML (INPUT idDet, INPUT iId, OUTPUT iId).
                    RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).                            

               END.
               RUN searchTag IN hGenXml (INPUT "total", INPUT getStack(), OUTPUT iId).
               if (iId <> ?) THEN DO:
                    addStack(iId).

                         /*Criacao de valores para manter as relacoes*/
                         CREATE tt-total.
                         ASSIGN tt-total.tt-totalID = iId.
                         ASSIGN tt-total.ttNFeID = ttNFe.ttNFeID
                                tt-total.chave   = ttNFe.chave.

                         RUN searchTag IN hGenXml (INPUT "ICMSTot", INPUT getStack(), OUTPUT iId).
                         if (iId <> ?) THEN DO:
                              addStack(iId).

                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",     OUTPUT tt-total.vBC_14).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMS",   OUTPUT tt-total.vICMS_05).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCST",   OUTPUT tt-total.vBCST_04).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vST",     OUTPUT tt-total.vST).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vProd",   OUTPUT tt-total.vProd_00).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vFrete",  OUTPUT tt-total.vFrete_00).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vSeg",    OUTPUT tt-total.vSeg_00).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vDesc",   OUTPUT tt-total.vDesc_00).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vII",     OUTPUT tt-total.vII_00).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vIPI",    OUTPUT tt-total.vIPI_00).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vPIS",    OUTPUT tt-total.vPIS_03).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vCOFINS", OUTPUT tt-total.vCOFINS_03).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vOutro",  OUTPUT tt-total.vOutro).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vNF",     OUTPUT tt-total.vNF).
                              delStack().
                         END.

                         RUN searchTag IN hGenXml (INPUT "ISSQNtot", INPUT getStack(), OUTPUT iId).
                         if (iId <> ?) THEN DO:
                              addStack(iId).

                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vServ",   OUTPUT tt-total.vServ).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBC",     OUTPUT tt-total.vBC_15).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vISS",    OUTPUT tt-total.vISS).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vPIS",    OUTPUT tt-total.vPIS_04).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vCOFINS", OUTPUT tt-total.vCOFINS_04).
                              delStack().
                         END.

                         RUN searchTag IN hGenXml (INPUT "retTrib", INPUT getStack(), OUTPUT iId).
                         if (iId <> ?) THEN DO:
                              addStack(iId).

                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vRetPIS",    OUTPUT tt-total.vRetPIS).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vRetCOFINS", OUTPUT tt-total.vRetCOFINS).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vRetCSLL",   OUTPUT tt-total.vRetCSLL).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCIRRF",    OUTPUT tt-total.vBCIRRF).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vIRRF",      OUTPUT tt-total.vIRRF).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCRetPrev", OUTPUT tt-total.vBCRetPrev).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vRetPrev",   OUTPUT tt-total.vRetPrev).
                              delStack().
                         END.

                    delStack().

               END.
               RUN searchTag IN hGenXml (INPUT "transp", INPUT getStack(), OUTPUT iId).
               if (iId <> ?) THEN DO:
                    addStack(iId).

                         /*Criacao de valores para manter as relacoes*/
                         CREATE tt-transp.
                         ASSIGN tt-transp.tt-transpID = iId.
                         ASSIGN tt-transp.ttNFeID = ttNFe.ttNFeID
                                tt-transp.chave   = ttNFe.chave.

                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "modFrete", OUTPUT tt-transp.modFrete).
                         RUN searchTag IN hGenXml (INPUT "transporta", INPUT getStack(), OUTPUT iId).
                         if (iId <> ?) THEN DO:
                              addStack(iId).

                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CNPJ",   OUTPUT tt-transp.CNPJ).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CPF",    OUTPUT tt-transp.CPF).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xNome",  OUTPUT tt-transp.xNome).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "IE",     OUTPUT tt-transp.IE).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xEnder", OUTPUT tt-transp.xEnder).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xMun",   OUTPUT tt-transp.xMun).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "UF",     OUTPUT tt-transp.UF).
                              delStack().
                         END.

                         RUN searchTag IN hGenXml (INPUT "retTransp", INPUT getStack(), OUTPUT iId).
                         if (iId <> ?) THEN DO:
                              addStack(iId).

                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vServ",      OUTPUT tt-transp.vServ_00).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vBCRet",     OUTPUT tt-transp.vBCRet).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pICMSRet",   OUTPUT tt-transp.pICMSRet).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vICMSRet",   OUTPUT tt-transp.vICMSRet).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "CFOP",       OUTPUT tt-transp.CFOP_00).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "cMunFG",     OUTPUT tt-transp.cMunFG_00).
                              delStack().
                         END.

                         RUN searchTag IN hGenXml (INPUT "veicTransp", INPUT getStack(), OUTPUT iId).
                         if (iId <> ?) THEN DO:
                              addStack(iId).

                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "placa", OUTPUT tt-transp.placa).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "UF",    OUTPUT tt-transp.UF_00).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "RNTC",  OUTPUT tt-transp.RNTC).
                              delStack().
                         END.

                         RUN searchTag IN hGenXml (INPUT "reboque", INPUT getStack(), OUTPUT iId).
                         ASSIGN idreboque = getStack().
                         RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                         assign cont-reboque = 0.
                         DO WHILE c-value = "reboque":

                              addStack(iId).

                                   ASSIGN cont-reboque = cont-reboque + 1.

                                   /*Criacao de valores para manter as relacoes*/
                                   CREATE ttreboque.
                                   ASSIGN ttreboque.ttreboqueID = iId.
                                   ASSIGN ttreboque.tt-transpID = tt-transp.tt-transpID
                                          ttreboque.chave       = tt-transp.chave
                                          ttreboque.seq         = cont-reboque.

                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "placa", OUTPUT ttreboque.placa).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "UF",    OUTPUT ttreboque.UF).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "RNTC",  OUTPUT ttreboque.RNTC).

                              ASSIGN iId = getStack().
                              delStack().
                              RUN getNextSonId IN hGenXML (INPUT idreboque, INPUT iId, OUTPUT iId).
                              RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                         END.

                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "vagao", OUTPUT tt-transp.vagao).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "balsa", OUTPUT tt-transp.balsa).

                         RUN searchTag IN hGenXml (INPUT "vol", INPUT getStack(), OUTPUT iId).
                         ASSIGN idvol = getStack().
                         RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).
                         DO WHILE c-value = "vol":

                              addStack(iId).

                                   ASSIGN cont-vol = cont-vol + 1.

                                   /*Criacao de valores para manter as relacoes*/
                                   CREATE ttvol.
                                   ASSIGN ttvol.ttvolID = iId.
                                   ASSIGN ttvol.tt-transpID = tt-transp.tt-transpID
                                          ttvol.chave       = tt-transp.chave
                                          ttvol.seq         = cont-vol.

                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "qVol",  OUTPUT ttvol.qVol).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "esp",   OUTPUT ttvol.esp).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "marca", OUTPUT ttvol.marca).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nVol",  OUTPUT ttvol.nVol).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pesoL", OUTPUT ttvol.pesoL).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "pesoB", OUTPUT ttvol.pesoB).

                                   RUN searchTag IN hGenXml (INPUT "lacres", INPUT getStack(), OUTPUT iId).
                                   ASSIGN idlacres = getStack().
                                   RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value2).
                                   DO WHILE c-value2 = "lacres":
                                   
                                        addStack(iId).

                                             ASSIGN cont-lacres = cont-lacres + 1.

                                             /*Criacao de valores para manter as relacoes*/
                                             CREATE ttlacres.
                                             ASSIGN ttlacres.ttlacresID = iId.
                                             ASSIGN ttlacres.ttvolID = ttvol.ttvolID
                                                    ttlacres.chave   = ttvol.chave
                                                    ttlacres.seq     = cont-lacres.

                                             RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nLacre", OUTPUT ttlacres.nLacre).
                                        delStack().
                                        RUN getNextSonId IN hGenXML (INPUT idlacres, INPUT iId, OUTPUT iId).
                                        RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value2).

                                   END.
                              ASSIGN iId = getStack().
                              delStack().
                              RUN getNextSonId IN hGenXML (INPUT idvol, INPUT iId, OUTPUT iId).
                              RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                         END.
                    delStack().

               END.
               RUN searchTag IN hGenXml (INPUT "cobr", INPUT getStack(), OUTPUT iId).
               if (iId <> ?) THEN DO:
                    addStack(iId).

                         /*Criacao de valores para manter as relacoes*/
                         CREATE ttcobr.
                         ASSIGN ttcobr.cobrID = iId.
                         ASSIGN ttcobr.ttNFeID = ttNFe.ttNFeID
                                ttcobr.chave   = ttNFe.chave.

                         RUN searchTag IN hGenXml (INPUT "fat", INPUT getStack(), OUTPUT iId).
                         if (iId <> ?) THEN DO:
                              addStack(iId).

                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nFat",  OUTPUT ttcobr.nFat).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vOrig", OUTPUT ttcobr.vOrig).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vDesc", OUTPUT ttcobr.vDesc_01).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vLiq",  OUTPUT ttcobr.vLiq).
                              delStack().
                         END.

                         
                         RUN searchTag IN hGenXml (INPUT "dup", INPUT getStack(), OUTPUT iId).
                         ASSIGN iddup = getStack().
                         RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).
                         DO WHILE c-value = "dup":

                              addStack(iId).

                                   ASSIGN cont-dup = cont-dup + 1.

                                   /*Criacao de valores para manter as relacoes*/
                                   CREATE ttdup.
                                   ASSIGN ttdup.ttdupID = iId.
                                   ASSIGN ttdup.tt-cobrID = ttcobr.cobrID
                                          ttdup.chave = ttcobr.chave
                                          ttdup.seq   = cont-dup.

                                   RUN getSonVal  IN hGenXml (INPUT getStack(), INPUT "nDup",  OUTPUT ttdup.nDup).
                                   RUN getSonDate IN hGenXml (INPUT getStack(), INPUT "dVenc", OUTPUT ttdup.dVenc).
                                   RUN getSonDec  IN hGenXml (INPUT getStack(), INPUT "vDup",  OUTPUT ttdup.vDup).

                              ASSIGN iId = getStack().
                              delStack().
                              RUN getNextSonId IN hGenXML (INPUT iddup, INPUT iId, OUTPUT iId).
                              RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                         END.
                    delStack().

               END.
               RUN searchTag IN hGenXml (INPUT "infAdic", INPUT getStack(), OUTPUT iId).
               if (iId <> ?) THEN DO:
                    addStack(iId).

                         /*Criacao de valores para manter as relacoes*/
                         CREATE ttinfAdic.
                         ASSIGN ttinfAdic.tt-infAdicID = iId.
                         ASSIGN ttinfAdic.ttNFeID = ttNFe.ttNFeID
                                ttinfAdic.chave   = ttNFe.chave.

                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "infAdFisco", OUTPUT ttinfAdic.infAdFisco).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "infCpl",     OUTPUT ttinfAdic.infCpl).

                         RUN searchTag IN hGenXml (INPUT "obsCont", INPUT getStack(), OUTPUT iId).
                         ASSIGN idobsCont = getStack().
                         RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                         assign cont-obsCont = 0.
                         DO WHILE c-value = "obsCont":

                              addStack(iId).

                                   ASSIGN cont-obsCont = cont-obsCont + 1.

                                   /*Criacao de valores para manter as relacoes*/
                                   CREATE ttobsCont.
                                   ASSIGN ttobsCont.ttobsContID = iId.
                                   ASSIGN ttobsCont.tt-infAdicID = ttinfAdic.tt-infAdicID
                                          ttobsCont.chave        = ttinfAdic.chave
                                          ttobsCont.seq          = cont-obsCont.

                                   RUN getAttrValue IN hGenXML (INPUT getStack(), INPUT "xCampo",   OUTPUT ttobsCont.xCampo).  /*getAttrValue*/
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xTexto", OUTPUT ttobsCont.xTexto).

                              ASSIGN iId = getStack().
                              delStack().
                              RUN getNextSonId IN hGenXML (INPUT idobsCont, INPUT iId, OUTPUT iId).
                              RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                         END.

                         RUN searchTag IN hGenXml (INPUT "obsFisco", INPUT getStack(), OUTPUT iId).
                         ASSIGN idobsFisco = getStack().
                         RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                         assign cont-obsFisco = 0.
                         DO WHILE c-value = "obsFisco":
                         
                              addStack(iId).

                                   ASSIGN cont-obsFisco = cont-obsFisco + 1.

                                   /*Criacao de valores para manter as relacoes*/
                                   CREATE ttobsFisco.
                                   ASSIGN ttobsFisco.ttobsFiscoID = iId.
                                   ASSIGN ttobsFisco.tt-infAdicID = ttinfAdic.tt-infAdicID
                                          ttobsFisco.chave        = ttinfAdic.chave
                                          ttobsFisco.seq          = cont-obsFisco.

                                   RUN getAttrValue IN hGenXML (INPUT getStack(), INPUT "xCampo", OUTPUT ttobsFisco.xCampo).  /*getAttrValue*/
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xTexto", OUTPUT ttobsFisco.xTexto).

                              ASSIGN iId = getStack().
                              delStack().
                              RUN getNextSonId IN hGenXML (INPUT idobsFisco, INPUT iId, OUTPUT iId).
                              RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                         END.

                         RUN searchTag IN hGenXml (INPUT "procRef", INPUT getStack(), OUTPUT iId).
                         ASSIGN idprocRef = getStack().
                         RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).
                         DO WHILE c-value = "procRef":

                              addStack(iId).
                                   
                                   ASSIGN cont-procRef = cont-procRef + 1.

                                   /*Criacao de valores para manter as relacoes*/
                                   CREATE ttprocRef.
                                   ASSIGN ttprocRef.ttprocRefID = iId.
                                   ASSIGN ttprocRef.tt-infAdicID = ttinfAdic.tt-infAdicID
                                          ttprocRef.chave = ttinfAdic.chave
                                          ttprocRef.seq   = cont-procRef.

                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "nProc",   OUTPUT ttprocRef.nProc).
                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "indProc", OUTPUT ttprocRef.indProc).

                              ASSIGN iId = getStack().
                              delStack().
                              RUN getNextSonId IN hGenXML (INPUT idprocRef, INPUT iId, OUTPUT iId).
                              RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                         END.
                    delStack().

               END.
               RUN searchTag IN hGenXml (INPUT "exporta", INPUT getStack(), OUTPUT iId).
               if (iId <> ?) THEN DO:
                    addStack(iId).

                         /*Criacao de valores para manter as relacoes*/
                         CREATE ttexporta.
                         ASSIGN ttexporta.tt-exportaID = iId.
                         ASSIGN ttexporta.ttNFeID = ttNFe.ttNFeID
                                ttexporta.chave   = ttNFe.chave.

                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "UFEmbarq",   OUTPUT ttexporta.UFEmbarq).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xLocEmbarq", OUTPUT ttexporta.xLocEmbarq).
                    delStack().

               END.
               RUN searchTag IN hGenXml (INPUT "compra", INPUT getStack(), OUTPUT iId).
               if (iId <> ?) THEN DO:
                    addStack(iId).

                         /*Criacao de valores para manter as relacoes*/
                         CREATE ttcompra.
                         ASSIGN ttcompra.tt-compraID = iId.
                         ASSIGN ttcompra.ttNFeID = ttNFe.ttNFeID
                                ttcompra.chave   = ttNFe.chave.

                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xNEmp", OUTPUT ttcompra.xNEmp).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xPed",  OUTPUT ttcompra.xPed).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xCont", OUTPUT ttcompra.xCont).
                    delStack().

               END.
               RUN searchTag IN hGenXml (INPUT "cana", INPUT getStack(), OUTPUT iId).
               if (iId <> ?) THEN DO:
                    addStack(iId).

                         /*Criacao de valores para manter as relacoes*/
                         CREATE tt-cana.
                         ASSIGN tt-cana.tt-canaID = iId.
                         ASSIGN tt-cana.ttNFeID = ttNFe.ttNFeID
                                tt-cana.chave   = ttNFe.chave.

                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "safra", OUTPUT tt-cana.safra).
                         RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "ref", OUTPUT tt-cana.ref).

                         RUN searchTag IN hGenXml (INPUT "forDia", INPUT getStack(), OUTPUT iId).
                         ASSIGN idforDia = getStack().
                         RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).
                         DO WHILE c-value = "forDia":

                              addStack(iId).

                                   ASSIGN cont-forDia = cont-forDia + 1.

                                   /*Criacao de valores para manter as relacoes*/
                                   CREATE ttforDia.
                                   ASSIGN ttforDia.ttforDiaID = iId.
                                   ASSIGN ttforDia.tt-canaID = tt-cana.tt-canaID
                                          ttforDia.chave     = tt-cana.chave
                                          ttforDia.seq       = cont-forDia.

                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qtde", OUTPUT ttforDia.qtde).

                              ASSIGN iId = getStack().
                              delStack().
                              RUN getNextSonId IN hGenXML (INPUT idforDia, INPUT iId, OUTPUT iId).
                              RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                         END.
                         RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qTotMes", OUTPUT tt-cana.qTotMes).
                         RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qTotAnt", OUTPUT tt-cana.qTotAnt).
                         RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "qTotGer", OUTPUT tt-cana.qTotGer).

                         RUN searchTag IN hGenXml (INPUT "deduc", INPUT getStack(), OUTPUT iId).
                         ASSIGN iddeduc = getStack().
                         RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).
                         DO WHILE c-value = "deduc":

                              addStack(iId).
                               
                                   ASSIGN cont-deduc = cont-deduc + 1.

                                   /*Criacao de valores para manter as relacoes*/
                                   CREATE ttdeduc.
                                   ASSIGN ttdeduc.ttdeducID = iId.
                                   ASSIGN ttdeduc.tt-canaID = tt-cana.tt-canaID
                                          ttdeduc.chave     = tt-cana.chave
                                          ttdeduc.seq       = cont-deduc.

                                   RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "xDed", OUTPUT ttdeduc.xDed).
                                   RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vDed", OUTPUT ttdeduc.vDed).

                              ASSIGN iId = getStack().
                              delStack().
                              RUN getNextSonId IN hGenXML (INPUT iddeduc, INPUT iId, OUTPUT iId).
                              RUN getTagName IN hGenXML (INPUT iId, OUTPUT c-value).

                         END.
                         RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vFor",    OUTPUT tt-cana.vFor).
                         RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vTotDed", OUTPUT tt-cana.vTotDed).
                         RUN getSonDec IN hGenXml (INPUT getStack(), INPUT "vLiqFor", OUTPUT tt-cana.vLiqFor).
                    delStack().

               END.
               delStack().
               
          END.
          delStack().

          IF ttide.tpEmis = "1" THEN DO:
        
              RUN searchTag IN hGenXml (INPUT "informacaoAdicional", INPUT getStack(), OUTPUT iId).
              if (iId <> ?) THEN DO:
                 addStack(iId).
              
                     CREATE ttinfoadic.
                     ASSIGN ttinfoadic.chave = ttNFe.chave.
                     RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "NomeArquivoDepositado", OUTPUT ttinfoadic.nomearquivodepos).
                     RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "estrutura",             OUTPUT ttinfoadic.estrutura).
                     RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "assinatura",            OUTPUT ttinfoadic.assinatura).
                     RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "situacao",              OUTPUT ttinfoadic.situacao).
                     RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "notaoriginal",          OUTPUT ttinfoadic.notaoriginal).
                     RUN getSonVal IN hGenXml (INPUT getStack(), INPUT "protocolo",             OUTPUT ttinfoadic.protocolo).
                 delStack().              
          
              END.
          
          END.

     END.
     delStack().
     /* ********* LEITURA DA MENSAGEM - END   ********* */


     /* ********* EFETIVAÄ«O - BEGIN ********* */

    DEFINE VARIABLE i-cont-aux AS INTEGER     NO-UNDO.

    empty temp-table tt-nfe003.
    empty temp-table tt-nfe004.
    empty temp-table tt-nfe001.
    empty temp-table tt-nfe021.
    empty temp-table tt-nfe002.
    empty temp-table tt-nfe005.
    /* empty temp-table tt-doc-orig-for-dia-cana. */
    /* empty temp-table tt-doc-orig-deduc-cana.   */
    empty temp-table tt-nfe013.
    empty temp-table tt-nfe009.
    empty temp-table tt-nfe010.
    empty temp-table tt-nfe011.
    empty temp-table tt-nfe012.
    
    FOR EACH ttNFe:
    
        FIND FIRST tt-nfe003 
            WHERE tt-nfe003.ch-acesso-comp-nfe = ttNFe.chave
            AND   tt-nfe003.idi-orig-trad = 1         NO-ERROR.

        IF NOT AVAIL tt-nfe003   THEN DO:
            
            CREATE tt-nfe003.
            FOR EACH  ttide
                WHERE ttide.chave = ttNFe.chave:
    
                ASSIGN  tt-nfe003.ch-acesso-comp-nfe            =  ttNFe.chave
                        tt-nfe003.idi-orig-trad                 =  1
                        tt-nfe003.ch-acesso-nfe                 =  ttide.cNF
                        tt-nfe003.UF                            =  ttide.cUF                                     
                        tt-nfe003.cod-cond-pag                  =  ttide.indPag
                        tt-nfe003.mod-doc-fisc                  =  ttide.MOD_00    
                        tt-nfe003.serie-docto                   =  string(ttide.serie)
                        tt-nfe003.nro-docto                     =  string(ttide.nNF)
                        tt-nfe003.dt-emissao                    =  ttide.dEmi
                        tt-nfe003.dt-entrada                    =  ttide.dSaiEnt
                        tt-nfe003.hr-entrada                    =  ttide.hSaiEnt /*2.0 - NOVO CAMPO*/
                        tt-nfe003.tp-nf                         =  ttide.tpNF  
                        tt-nfe003.cod-municipio                 =  ttide.cMunFG
                        tt-nfe003.forma-imp                     =  ttide.tpImp   
                        tt-nfe003.forma-emissao                 =  ttide.tpEmis  
                        tt-nfe003.cod-dv                        =  ttide.cDV
                        tt-nfe003.tipo-amb                      =  ttide.tpAmb   
                        tt-nfe003.cod-finalidade                =  ttide.finNFe  
                        tt-nfe003.proc-emissao                  =  ttide.procEmi 
                        tt-nfe003.versao-proc                   =  ttide.verProc
                        tt-nfe003.data-hr-cont                  =  ttide.dhCont /*2.0 - NOVO CAMPO*/
                        tt-nfe003.x-justif                      =  ttide.xJust  /*2.0 - NOVO CAMPO*/
                        tt-nfe003.sit-sefaz                     =  1.

    
                ASSIGN i-diferenca = 7 - LENGTH(tt-nfe003.nro-docto)
                       tt-nfe003.nro-docto = FILL("0",i-diferenca) + tt-nfe003.nro-docto.
                
            END.
    
            FOR EACH  ttemit
                WHERE ttemit.chave = ttNFe.chave:
            
                ASSIGN tt-nfe003.cnpj                          =  ttemit.CNPJ
                       tt-nfe003.cpf                           =  ttemit.CPF
                       tt-nfe003.razao-social                  =  ttemit.xNome
                       tt-nfe003.nome-fantasia                 =  ttemit.xFant
                       tt-nfe003.logradouro                    =  ttemit.xLgr   
                       tt-nfe003.num-end-emit                  =  ttemit.nro    
                       tt-nfe003.complemento                   =  ttemit.xCpl   
                       tt-nfe003.Bairro                        =  ttemit.xBairro
                       tt-nfe003.cod-municipio-end             =  ttemit.cMun   
                       tt-nfe003.nom-municipio-end             =  ttemit.xMun   
                       tt-nfe003.uf-end                        =  ttemit.UF     
                       tt-nfe003.cep                           =  ttemit.CEP    
                       tt-nfe003.cod-pais                      =  ttemit.cPais  
                       tt-nfe003.nom-pais                      =  ttemit.xPais  
                       tt-nfe003.fone-emit                     =  ttemit.fone /*2.0 - Aumentou tamanho*/  
                       tt-nfe003.insc-estadual                 =  ttemit.IE   
                       tt-nfe003.insc-estadual-subs            =  ttemit.IEST 
                       tt-nfe003.insc-municipal                =  ttemit.IM   
                       tt-nfe003.cnae-fiscal                   =  ttemit.CNAE
                       tt-nfe003.cod-reg-trib                  =  ttemit.CRT. /*2.0 - NOVO CAMPO*/
    
                FIND FIRST emitente
    	        	 WHERE emitente.CGC = ttemit.CNPJ NO-LOCK NO-ERROR.
    	        IF AVAIL emitente THEN
    	        	 ASSIGN tt-nfe003.cod-emitente = emitente.cod-emitente.
            END.
    
            
    
            FOR EACH  ttavulsa
                WHERE ttavulsa.chave = ttNFe.chave:
            
                    
                    ASSIGN tt-nfe003.cnpj-emissor                  =  ttavulsa.CNPJ_00  
                           tt-nfe003.org-emissor                   =  ttavulsa.xOrgao   
                           tt-nfe003.matr-agente                   =  ttavulsa.matr     
                           tt-nfe003.nom-agente                    =  ttavulsa.xAgente  
                           tt-nfe003.fone                          =  ttavulsa.fone_00 /*2.0 - Aumentou tamanho*/  
                           tt-nfe003.uf-avulsa                     =  ttavulsa.UF_00    
                           tt-nfe003.num-dar                       =  ttavulsa.nDAR     
                           tt-nfe003.dt-emissao-dar                =  ttavulsa.dEmi_00  
                           tt-nfe003.valor-dar                     =  ttavulsa.vDAR     
                           tt-nfe003.repemit                       =  ttavulsa.repEmi   
                           tt-nfe003.dt-pag-dar                    =  ttavulsa.dPag .
            END.
    
            FOR EACH  ttdest
                WHERE ttdest.chave = ttNFe.chave:
                
            
                ASSIGN tt-nfe003.cnpj-destino                  =  ttdest.CNPJ_01  
                       tt-nfe003.cpf-destino                   =  ttdest.CPF_00   
                       tt-nfe003.razao-social-dest             =  ttdest.xNome_00 
                       tt-nfe003.logradouro-dest               =  ttdest.xLgr_00   
                       tt-nfe003.num-end-dest                  =  ttdest.nro_00    
                       tt-nfe003.complemento-dest              =  ttdest.xCpl_00   
                       tt-nfe003.bairro-dest                   =  ttdest.xBairro_00
                       tt-nfe003.cod-municipio-dest            =  ttdest.cMun_00   
                       tt-nfe003.nom-municipio-dest            =  ttdest.xMun_00   
                       tt-nfe003.uf-destino                    =  ttdest.UF_01     
                       tt-nfe003.cep-destino                   =  ttdest.CEP_00    
                       tt-nfe003.cod-pais-dest                 =  ttdest.cPais_00  
                       tt-nfe003.nom-pais-dest                 =  ttdest.xPais_00  
                       tt-nfe003.fone-destino                  =  ttdest.fone_01 /*2.0 - Aumentou tamanho*/
                       tt-nfe003.insc-estadual-dest            =  ttdest.IE_00
                       tt-nfe003.insc-estad-subs-dest          =  ttdest.ISUF /*2.0 - Verificar campo*/
                       tt-nfe003.email-dest                    =  ttdest.email. /*2.0 - NOVO CAMPO*/
            END.
    
            FOR EACH  ttretirada
                WHERE ttretirada.chave = ttNFe.chave:
                
                ASSIGN tt-nfe003.cnpj-retirada                 =  ttretirada.CNPJ_02   
                       tt-nfe003.cpf-retirada                  =  ttretirada.CPF_01 /*2.0 - NOVO CAMPO*/
                       tt-nfe003.logradouro-ret                =  ttretirada.xLgr_01   
                       tt-nfe003.num-end-ret                   =  ttretirada.nro_01
                       tt-nfe003.complemento-ret               =  ttretirada.xCpl_01
                       tt-nfe003.bairro-ret                    =  ttretirada.xBairro_01
                       tt-nfe003.cod-municipio-ret             =  ttretirada.cMun_01
                       tt-nfe003.nom-municipio-ret             =  ttretirada.xMun_01
                       tt-nfe003.uf-retirada                   =  ttretirada.UF_02.
            END.
    
            FOR EACH  ttentrega
                WHERE ttentrega.chave = ttNFe.chave:
                
                ASSIGN tt-nfe003.cnpj-entrega                  =  ttentrega.CNPJ_03
                       tt-nfe003.logradouro-ent                =  ttentrega.xLgr_02
                       tt-nfe003.num-end-ent                   =  ttentrega.nro_02
                       tt-nfe003.complemento-ent               =  ttentrega.xCpl_02
                       tt-nfe003.bairro-ent                    =  ttentrega.xBairro_02
                       tt-nfe003.cod-municipio-ent             =  ttentrega.cMun_02
                       tt-nfe003.nom-municipio-ent             =  ttentrega.xMun_02
                       tt-nfe003.uf-entrega                    =  ttentrega.UF_03.
            END.
    
            FOR EACH  tt-total
                WHERE tt-total.chave = ttNFe.chave:
                
                    
            
                    ASSIGN tt-nfe003.base-icms                     =  tt-total.vBC_14                               
                           tt-nfe003.valor-icms                    =  tt-total.vICMS_05                             
                           tt-nfe003.base-icms-subs                =  tt-total.vBCST_04                             
                           tt-nfe003.valor-icms-subs               =  tt-total.vST                                  
                           tt-nfe003.valor-produto                 =  tt-total.vProd_00                             
                           tt-nfe003.valor-frete                   =  tt-total.vFrete_00                          
                           tt-nfe003.valor-seguro                  =  tt-total.vSeg_00    
                           tt-nfe003.valor-desconto                =  tt-total.vDesc_00   
                           tt-nfe003.valor-ii                      =  tt-total.vII_00     
                           tt-nfe003.valor-ipi                     =  tt-total.vIPI_00    
                           tt-nfe003.valor-pis                     =  tt-total.vPIS_03    
                           tt-nfe003.valor-cofins                  =  tt-total.vCOFINS_03 
                           tt-nfe003.valor-outros                  =  tt-total.vOutro     
                           tt-nfe003.valor-total                   =  tt-total.vNF
                           tt-nfe003.valor-iss                     =  tt-total.vServ
                           tt-nfe003.base-iss                      =  tt-total.vBC_15
                           tt-nfe003.valor-tot-iss                 =  tt-total.vISS
                           tt-nfe003.valor-pis-iss                 =  tt-total.vPIS_04
                           tt-nfe003.valor-cofins-iss              =  tt-total.vCOFINS_04
                           tt-nfe003.base-irrf                     =  tt-total.vBCIRRF
                           tt-nfe003.valor-pis-ret                 =  tt-total.vRetPIS
                           tt-nfe003.valor-cofins-ret              =  tt-total.vRetCOFINS
                           tt-nfe003.valor-csll-ret                =  tt-total.vRetCSLL 
                           tt-nfe003.valor-irrf                    =  tt-total.vIRRF
                           tt-nfe003.base-prev-ret                 =  tt-total.vBCRetPrev
                           tt-nfe003.valor-prev-ret                =  tt-total.vRetPrev.
            END.
    
            FOR EACH  tt-transp
                WHERE tt-transp.chave = ttNFe.chave:
            
                ASSIGN  tt-nfe003.mod-frete                     =  tt-transp.modFrete
                        tt-nfe003.cnpj-transp                   =  tt-transp.CNPJ
                        tt-nfe003.cpf-transp                    =  tt-transp.CPF
                        tt-nfe003.razao-social-transp           =  tt-transp.xNome
                        tt-nfe003.insc-estadual-transp          =  tt-transp.IE
                        tt-nfe003.end-transp                    =  tt-transp.xEnder
                        tt-nfe003.nom-municipio-transp          =  tt-transp.xMun
                        tt-nfe003.uf-transp                     =  tt-transp.UF
                        tt-nfe003.valor-serv-ret-trans          =  tt-transp.vServ_00
                        tt-nfe003.base-icms-ret                 =  tt-transp.vBCRe
                        tt-nfe003.aliq-icms-ret                 =  tt-transp.pICMSRet
                        tt-nfe003.valor-icms-ret                =  tt-transp.vICMSRet
                        tt-nfe003.cfop-ret                      =  tt-transp.CFOP_00
                        tt-nfe003.cod-municipio-fg              =  tt-transp.cMunFG_00
                        tt-nfe003.placa                         =  tt-transp.placa
                        tt-nfe003.uf-placa                      =  tt-transp.UF_00
                        tt-nfe003.cod-rntc                      =  tt-transp.RNTC
                        tt-nfe003.vagao                         =  tt-transp.vagao /*2.0 - NOVO CAMPO*/
                        tt-nfe003.balsa                         =  tt-transp.balsa. /*2.0 - NOVO CAMPO*/
    
    
            END.
    
            FOR EACH  ttcobr
                WHERE ttcobr.chave = ttNFe.chave:
            
                ASSIGN tt-nfe003.cod-fatura                    =  ttcobr.nFat
                       tt-nfe003.valor-orig-fatura             =  ttcobr.vOrig    
                       tt-nfe003.valor-desc-fatura             =  ttcobr.vDesc_01 
                       tt-nfe003.valor-liq-fatura              =  ttcobr.vLiq.
            END.
    
            FOR EACH  ttinfAdic
                WHERE ttinfAdic.chave = ttNFe.chave:
            
                ASSIGN  tt-nfe003.inf-adicionais               =  ttinfAdic.infAdFisco
                        tt-nfe003.inf-complement               =  ttinfAdic.infCpl.
            END.
    
            /*INICIO 2.0*/
            FOR EACH tt-cana
                WHERE tt-cana.chave = ttNFe.chave:
    
                ASSIGN tt-nfe003.cana-safra = tt-cana.safra
                       tt-nfe003.cana-mes-ano-ref = tt-cana.ref
                       tt-nfe003.cana-qtd-tot-mes = tt-cana.qTotMes
                       tt-nfe003.cana-qtd-tot-ant = tt-cana.qTotAnt
                       tt-nfe003.cana-qtd-tot-geral = tt-cana.qTotGer
                       tt-nfe003.cana-vl-fornecimentos = tt-cana.vFor
                       tt-nfe003.cana-vl-tot-ded = tt-cana.vTotDed
                       tt-nfe003.cana-vl-liq-fornecimentos = tt-cana.vLiqFor.
    
            END.
            
            /* FOR EACH ttforDia                                                       */
            /*     WHERE ttforDia.chave = ttNFe.chave:                                 */
            /*     /*ATE AQUI*/                                                        */
            /*     CREATE tt-doc-orig-for-dia-cana.                                    */
            /*     ASSIGN tt-doc-orig-for-dia-cana.ch-acesso-comp-nfe = ttforDia.chave */
            /*            tt-doc-orig-for-dia-cana.idi-orig-trad = 1                   */
            /*            tt-doc-orig-for-dia-cana.qtd = ttforDia.qtde.                */
            /*                                                                         */
            /* END.                                                                    */
            /*                                                                         */
            /* FOR EACH ttdeduc                                                        */
            /*     WHERE ttdeduc.chave = ttNFe.chave:                                  */
            /*                                                                         */
            /*     CREATE tt-doc-orig-deduc-cana.                                      */
            /*     ASSIGN tt-doc-orig-deduc-cana.ch-acesso-comp-nfe = ttdeduc.chave    */
            /*            tt-doc-orig-deduc-cana.idi-orig-trad = 1                     */
            /*            tt-doc-orig-deduc-cana.desc-deduc = ttdeduc.xDed             */
            /*            tt-doc-orig-deduc-cana.vl-deduc = ttdeduc.vDed.              */
            /*                                                                         */
            /* END.                                                                    */
            /*FIM 2.0*/
    
            FOR EACH  ttobsCont
                WHERE ttobsCont.chave = ttNFe.chave:
               
                      ASSIGN tt-nfe003.obs-cont[ttobsCont.seq]       =  ttobsCont.xCampo
                             tt-nfe003.obs-cont-txt[ttobsCont.seq]   =  ttobsCont.xtexto.
            END.
    
            FOR EACH  ttobsfisco
                WHERE ttobsFisco.chave = ttNFe.chave:
                
                    ASSIGN tt-nfe003.obs-fisco[ttobsFisco.seq]      =  ttobsFisco.xCampo
                           tt-nfe003.obs-fisco-txt[ttobsFisco.seq]  =  ttobsFisco.xtexto.
                
            END.
    
            FOR EACH ttexporta
                WHERE ttexporta.chave = ttNFe.chave:
                
                ASSIGN tt-nfe003.uf-embarque                   =  ttexporta.UFEmbarq
                       tt-nfe003.localiz-embarque              =  ttexporta.xLocEmbarq.
            END.
    
            FOR EACH  ttcompra
                WHERE ttcompra.chave = ttNFe.chave:
            
                ASSIGN  tt-nfe003.nota-empenho                  =  ttcompra.xNEmp
                        tt-nfe003.inf-pedido                    =  ttcompra.xPed
                        tt-nfe003.inf-contrato                  =  ttcompra.xCont.
                
            END.
    
            FOR EACH ttreboque
                WHERE ttreboque.chave = ttNFe.chave:
                                                                         
                    ASSIGN tt-nfe003.uf-reboque [ttreboque.seq]        =  ttreboque.placa  
                           tt-nfe003.cod-rntc-reboque [ttreboque.seq] =  ttreboque.UF     
                           tt-nfe003.placa-reboque[ttreboque.seq]      =  ttreboque.RNTC . 
            END.
                   
            
            FOR EACH ttdup
                where ttdup.chave =  ttNFe.chave
                and   ttdup.vDup  <> ?
                and   ttdup.dVenc <> ?:
              
                FIND FIRST tt-nfe001
                     WHERE tt-nfe001.ch-acesso-comp-nfe = ttdup.chave
                     AND  tt-nfe001.idi-orig-trad       = 1             
                     AND  tt-nfe001.nro-duplicata      = IF ttdup.nDup = ? THEN string(ttdup.seq) ELSE ttdup.nDup NO-ERROR.
                IF NOT AVAIL tt-nfe001 THEN DO:
        
                    CREATE tt-nfe001.
                    ASSIGN tt-nfe001.ch-acesso-comp-nfe = ttdup.chave
                           tt-nfe001.idi-orig-trad      = 1
                           tt-nfe001.nro-duplicata      = IF ttdup.nDup = ? THEN string(ttdup.seq) ELSE ttdup.nDup
                           tt-nfe001.dt-vencim          = ttdup.dVenc
                           tt-nfe001.vl-duplicata       = ttdup.vDup.
                END.
            END.
            
            FOR EACH  ttvol
                WHERE ttvol.chave =  ttNFe.chave:
        
                FIND FIRST tt-nfe021
                     WHERE tt-nfe021.ch-acesso-comp-nfe = ttvol.chave
                     AND   tt-nfe021.idi-orig-trad      = 1         NO-ERROR.
                IF NOT AVAIL tt-nfe021 THEN DO:
        
                    CREATE tt-nfe021.
                    ASSIGN tt-nfe021.ch-acesso-comp-nfe = ttvol.chave
                           tt-nfe021.idi-orig-trad      = 1
                           tt-nfe021.esp-volumes        = ttvol.esp   
                           tt-nfe021.marca-volume       = ttvol.marca 
                           tt-nfe021.num-volume         = ttvol.nVol  
                           tt-nfe021.qtd-volume         = ttvol.qVol
                           tt-nfe021.peso-liq           = ttvol.pesoL 
                           tt-nfe021.peso-bruto         = ttvol.pesoB.
    
                END.
            END.
                
            FOR EACH ttlacres
                WHERE ttlacres.chave =  ttNFe.chave:
        
                FIND FIRST tt-nfe002
                     WHERE tt-nfe002.ch-acesso-comp-nfe = ttlacres.chave
                     AND   tt-nfe002.idi-orig-trad      = 1       NO-ERROR.
                IF NOT AVAIL tt-nfe002 THEN DO:
        
    
                    CREATE tt-nfe002.
                    ASSIGN tt-nfe002.ch-acesso-comp-nfe = ttlacres.chave
                           tt-nfe002.idi-orig-trad      = 1       
                           tt-nfe002.esp-volumes        = tt-nfe021.esp-volumes
                           tt-nfe002.marca-volume       = tt-nfe021.marca-volume
                           tt-nfe002.num-volume         = tt-nfe021.marca-volume
                           tt-nfe002.num-lacre          = ttlacres.nLacre.
                END.
            END.
            
    
            /* INICIO JA VISTO */
        
            ASSIGN i-seq-refer = 1.
    
            FOR EACH ttNFref
                WHERE ttNFref.chave =  ttNFe.chave:                    
    
                FIND FIRST tt-nfe005
                     WHERE tt-nfe005.ch-acesso-comp-nfe = ttNFref.chave           
                	 AND   tt-nfe005.idi-orig-trad      = 1       
                     AND   tt-nfe005.num-seq            = i-seq-refer NO-ERROR. 
                    IF NOT AVAIL tt-nfe005  THEN DO:
    
                    IF ttNFref.cUF <> ? THEN DO: /*refNF*/
                         CREATE tt-nfe005.
                         ASSIGN tt-nfe005.ch-acesso-comp-nfe = ttNFref.chave           
                        	    tt-nfe005.idi-orig-trad      = 1      
                                tt-nfe005.uf                 = ttNFref.cUF
                        	    tt-nfe005.dt-emissao         = ttNFref.AAMM
                        	    tt-nfe005.cnpj               = ttNFref.CNPJ
                        	    tt-nfe005.cod-mod-doc-fisc   = ttNFref.mod_02
                        	    tt-nfe005.serie-docto        = ttNFref.serie
                        	    tt-nfe005.num-documento      = ttNFref.nNF
                                tt-nfe005.nro-docto          = IF STRING(ttNFref.nNF, "9999999") = ? THEN "0" ELSE STRING(ttNFref.nNF, "9999999")
                                tt-nfe005.num-seq            = i-seq-refer
                                i-seq-refer                              = i-seq-refer + 1. 
                    END.
    
                    IF ttNFref.cUF_00 <> ? THEN DO: /*refNFP*/
                         CREATE tt-nfe005.
                         ASSIGN tt-nfe005.ch-acesso-comp-nfe = ttNFref.chave           
                        	    tt-nfe005.idi-orig-trad      = 1      
                                tt-nfe005.uf                 = ttNFref.cUF_00
                        	    tt-nfe005.dt-emissao         = ttNFref.AAMM_00
                        	    tt-nfe005.cnpj               = ttNFref.CNPJ_00
                                tt-nfe005.cpf                = ttNFref.cpf /*2.0 - NOVO CAMPO*/
                                tt-nfe005.ie-emitente        = ttNFref.IE /*2.0 - NOVO CAMPO*/
                        	    tt-nfe005.cod-mod-doc-fisc   = ttNFref.mod_00
                        	    tt-nfe005.serie-docto        = ttNFref.serie_00
                        	    tt-nfe005.num-documento      = ttNFref.nNF_00
                                tt-nfe005.nro-docto          = IF STRING(ttNFref.nNF_00, "9999999") = ? THEN "0" ELSE STRING(ttNFref.nNF_00, "9999999")
                                tt-nfe005.num-seq            = i-seq-refer
                                i-seq-refer                              = i-seq-refer + 1. 
                    END.
    
                    IF ttNFref.refNFe <> ? THEN DO: /*refNFe*/
                        CREATE tt-nfe005.
                        ASSIGN tt-nfe005.ch-acesso-comp-nfe = ttNFref.chave           
                       	       tt-nfe005.idi-orig-trad      = 1      
                               tt-nfe005.ch-acesso-nfe      = ttNFref.refNFe                   	    
                               tt-nfe005.num-seq            = i-seq-refer
                               i-seq-refer                              = i-seq-refer + 1. 
                    END.
    
                    IF ttNFref.refCTe <> ? THEN DO: /*refCTe*/
                        CREATE tt-nfe005.
                        ASSIGN tt-nfe005.ch-acesso-comp-nfe = ttNFref.chave           
                       	       tt-nfe005.idi-orig-trad      = 1      
                               tt-nfe005.ch-acesso-cte      = ttNFref.refCTe /*2.0 - NOVO CAMPO*/
                               tt-nfe005.num-seq            = i-seq-refer
                               i-seq-refer                              = i-seq-refer + 1.
                    END.
    
                    IF ttNFref.mod_01 <> ? THEN DO: /*refECF*/
                         CREATE tt-nfe005.
                         ASSIGN tt-nfe005.ch-acesso-comp-nfe = ttNFref.chave           
                        	    tt-nfe005.idi-orig-trad      = 1      
                                tt-nfe005.cod-mod-doc-fisc   = ttNFref.mod_01
                                tt-nfe005.num-seq-ecf        = ttNFref.nECF /*2.0 - NOVO CAMPO*/
                                tt-nfe005.num-con-oo         = ttNFref.nCOO /*2.0 - NOVO CAMPO*/
                                tt-nfe005.num-seq            = i-seq-refer
                                i-seq-refer                              = i-seq-refer + 1. 
                    END.
    
                END.
            END.
    
            /* FIM JA VISTO */
            
            
            FOR EACH ttprocRef
                WHERE ttprocRef.chave =  ttNFe.chave:
        
                FIND FIRST tt-nfe004
                     WHERE tt-nfe004.ch-acesso-comp-nfe =  ttprocRef.chave              
                     AND   tt-nfe004.idi-orig-trad      =  1       NO-ERROR. 
                IF NOT AVAIL tt-nfe004 THEN DO:
                    CREATE tt-nfe004.
                    ASSIGN tt-nfe004.ch-acesso-comp-nfe =  ttprocRef.chave              
                           tt-nfe004.idi-orig-trad      =  1      
                           tt-nfe004.cod-processo  = ttprocRef.nProc    
                    	   tt-nfe004.orig-processo = ttprocRef.indProc.
        
                END.
            END.
        
            FOR EACH ttdet
                WHERE ttdet.chave =  ttNFe.chave:

                if can-find(first ttDet
                            where ttdet.chave =  ttNFe.chave
                              and ttdet.CFOP <> "5124"  
                              and ttdet.CFOP <> "6124") and
                   ttdet.CFOP = "5124" or ttdet.CFOP = "6124" then do:

                    FIND FIRST btt-nfe003 
                         WHERE btt-nfe003.ch-acesso-comp-nfe = "9" + substring(ttdet.chave, 2, length(ttdet.chave))
                           AND btt-nfe003.idi-orig-trad = 1         NO-ERROR.
                
                    IF NOT AVAIL btt-nfe003   THEN DO:
                        create btt-nfe003.
                        buffer-copy tt-nfe003 except ch-acesso-comp-nfe to btt-nfe003.
                        assign btt-nfe003.ch-acesso-comp-nfe = "9" + substring(ttdet.chave, 2, length(ttdet.chave)).
                               ttdet.chave = "9" + substring(ttdet.chave, 2, length(ttdet.chave) - 1).
                    end.
                    else
                        assign ttdet.chave = "9" + substring(ttdet.chave, 2, length(ttdet.chave) - 1).
                end.
    
                FIND FIRST tt-nfe013
                     WHERE tt-nfe013.ch-acesso-comp-nfe =  ttdet.chave
                     AND   tt-nfe013.idi-orig-trad      =  1    
                     AND   tt-nfe013.seq-item           =  ttdet.nitem NO-ERROR.
                IF NOT AVAIL tt-nfe013 THEN DO:
                    
                    CREATE tt-nfe013.
                    ASSIGN tt-nfe013.ch-acesso-comp-nfe           = ttdet.chave         
                           tt-nfe013.idi-orig-trad                = 1    
                           tt-nfe013.seq-item                     = ttdet.nitem
                           tt-nfe013.aliq-cofins                  = ttdet.pCOFINS
                           tt-nfe013.aliq-cofins-cst              = ttdet.CST_12
                           tt-nfe013.aliq-cofins-outros           = ttdet.pCOFINS_00
                           tt-nfe013.aliq-cofins-st               = ttdet.pCOFINS_01
                           tt-nfe013.aliq-ipi                     = ttdet.pIPI
                           tt-nfe013.aliq-pis-outros              = ttdet.pPIS_00
                           tt-nfe013.aliq-iss                     = ttdet.vAliq
                           tt-nfe013.aliq-pis                     = ttdet.pPIS
                           tt-nfe013.aliq-pis-cst                 = ttdet.CST_08
                           tt-nfe013.aliq-pis-st                  = ttdet.pPIS_01
                           tt-nfe013.ano-fab                      = ttdet.anoFab
                           tt-nfe013.ano-mod                      = ttdet.anoMod
                           tt-nfe013.class-ipi                    = ttdet.clEnq
                           tt-nfe013.cmkg                         = ttdet.CMKG
                           tt-nfe013.cnpj-produtor                = ttdet.CNPJProd
                           tt-nfe013.cod-cfop                     = ttdet.CFOP
                           tt-nfe013.cod-chassi                   = ttdet.chassi
                           tt-nfe013.cod-codif                    = ttdet.CODIF
                           tt-nfe013.cod-cond-veic                = ttdet.condVeic
                           tt-nfe013.cod-cor-veic                 = ttdet.cCor
                           tt-nfe013.cod-ean                      = ttdet.cEAN
                           tt-nfe013.cod-ean-trib                 = ttdet.cEANTrib
                           tt-nfe013.cod-enq-ipi                  = ttdet.cEnq
                           tt-nfe013.cod-ext-ipi                  = ttdet.EXTIPI
                           tt-nfe013.cod-genero                   = ttdet.genero
                           tt-nfe013.cod-lista-serv-iss           = ttdet.cListServ
                           tt-nfe013.cod-trib-issqn               = ttdet.cSitTrib /*2.0 - NOVO CAMPO ISSQN*/
                           tt-nfe013.cod-marca-mod                = ttdet.cMod
                           tt-nfe013.cod-municipio-iss            = ttdet.cMunFG
                           tt-nfe013.cod-ncm                      = ttdet.NCM
                           tt-nfe013.cod-prod-anp                 = ttdet.cProdANP
                           tt-nfe013.cod-selo-ipi                 = ttdet.cSelo
                           tt-nfe013.cod-sit-trib-ipi             = ttdet.CSTIPITrib
                           tt-nfe013.cod-sit-trib-ipi-int         = ttdet.CSTIPINT
                           tt-nfe013.cod-vin                      = ttdet.VIN
                           tt-nfe013.cofins-int-cst               = ttdet.CST_14
                           tt-nfe013.cofins-outros-cst            = ttdet.CST_15
                           tt-nfe013.cofins-qtd-cst               = ttdet.CST_13
                           tt-nfe013.desc-cor-veic                = ttdet.xCor
                           tt-nfe013.desc-item                    = ttdet.xProd
                           tt-nfe013.dist-eixos                   = ttdet.dist
                           tt-nfe013.esp-veiculo                  = ttdet.espVeic.
                    ASSIGN tt-nfe013.icms-aliq[1]                 = ttdet.pICMS
                           tt-nfe013.icms-aliq[2]                 = ttdet.pICMS_00
                           tt-nfe013.icms-aliq[3]                 = ttdet.pICMS_01
                           tt-nfe013.icms-aliq[4]                 = ttdet.pICMS_02
                           tt-nfe013.icms-aliq[5]                 = ttdet.pICMS_03
                           tt-nfe013.icms-aliq[6]                 = ttdet.pICMS_04 
                           tt-nfe013.icms-aliq2[1]                 = ttdet.pICMS_05 /*2.0 - NOVO CAMPO ICMS Part*/
                           tt-nfe013.icms-base[1]                 = ttdet.vBC
                           tt-nfe013.icms-base[2]                 = ttdet.vBC_00
                           tt-nfe013.icms-base[3]                 = ttdet.vBC_01
                           tt-nfe013.icms-base[4]                 = ttdet.vBC_02
                           tt-nfe013.icms-base[5]                 = ttdet.vBC_03
                           tt-nfe013.icms-base[6]                 = ttdet.vBC_04
                           tt-nfe013.icms-cst[1]                  = ttdet.CST
                           tt-nfe013.icms-cst[2]                  = ttdet.CST_00
                           tt-nfe013.icms-cst[3]                  = ttdet.CST_01
                           tt-nfe013.icms-cst[4]                  = ttdet.CST_02
                           tt-nfe013.icms-cst[5]                  = ttdet.CST_03
                           tt-nfe013.icms-cst[6]                  = ttdet.CST_04
                           tt-nfe013.icms-cst[7]                  = ttdet.CST_05
                           tt-nfe013.icms-cst[8]                  = ttdet.CST_06
                           tt-nfe013.icms-cst[9]                  = ttdet.CST_07
                           tt-nfe013.icms-cst2[1]                 = ttdet.CST_16 /*2.0 - NOVO CAMPO ICMS Part*/
                           tt-nfe013.icms-cst2[2]                 = ttdet.CST_17 /*2.0 - NOVO CAMPO ICMS ST*/                        
                           tt-nfe013.icms-mod-bc[1]               = ttdet.modBC
                           tt-nfe013.icms-mod-bc[2]               = ttdet.modBC_00
                           tt-nfe013.icms-mod-bc[3]               = ttdet.modBC_01
                           tt-nfe013.icms-mod-bc[4]               = ttdet.modBC_02
                           tt-nfe013.icms-mod-bc[5]               = ttdet.modBC_03
                           tt-nfe013.icms-mod-bc[6]               = ttdet.modBC_04
                           tt-nfe013.icms-mod-bc2[1]               = ttdet.modBC_05 /*2.0 - NOVO CAMPO ICMS Part*/
                           tt-nfe013.icms-orig[1]                 = ttdet.orig
                           tt-nfe013.icms-orig[2]                 = ttdet.orig_00
                           tt-nfe013.icms-orig[3]                 = ttdet.orig_01
                           tt-nfe013.icms-orig[4]                 = ttdet.orig_02
                           tt-nfe013.icms-orig[5]                 = ttdet.orig_03
                           tt-nfe013.icms-orig[6]                 = ttdet.orig_04
                           tt-nfe013.icms-orig[7]                 = ttdet.orig_05
                           tt-nfe013.icms-orig[8]                 = ttdet.orig_06
                           tt-nfe013.icms-orig[9]                 = ttdet.orig_07
                           tt-nfe013.icms-orig2[1]                = ttdet.orig_08 /*2.0 - NOVO CAMPO ICMS Part*/
                           tt-nfe013.icms-orig2[2]                = ttdet.orig_09 /*2.0 - NOVO CAMPO ICMS ST*/
                           tt-nfe013.icms-orig2[3]                = ttdet.orig_10 /*2.0 - NOVO CAMPO ICMSSN101*/
                           tt-nfe013.icms-orig2[4]                = ttdet.orig_11 /*2.0 - NOVO CAMPO ICMSSN102*/
                           tt-nfe013.icms-orig2[5]                = ttdet.orig_12 /*2.0 - NOVO CAMPO ICMSSN201*/
                           tt-nfe013.icms-orig2[6]                = ttdet.orig_13 /*2.0 - NOVO CAMPO ICMSSN202*/
                           tt-nfe013.icms-orig2[7]                = ttdet.orig_14 /*2.0 - NOVO CAMPO ICMSSN500*/
                           tt-nfe013.icms-orig2[8]                = ttdet.orig_15 /*2.0 - NOVO CAMPO ICMSSN900*/                         
                           tt-nfe013.icms-valor[1]                = ttdet.vICMS
                           tt-nfe013.icms-valor[2]                = ttdet.vICMS_00
                           tt-nfe013.icms-valor[3]                = ttdet.vICMS_01
                           tt-nfe013.icms-valor[4]                = ttdet.vICMS_02
                           tt-nfe013.icms-valor[5]                = ttdet.vICMS_03
                           tt-nfe013.icms-valor[6]                = ttdet.vICMS_04
                           tt-nfe013.icms-valor2[1]                = ttdet.vICMS_05 /*2.0 - NOVO CAMPO ICMS 40*/
                           tt-nfe013.icms-valor2[2]                = ttdet.vICMS_06 /*2.0 - NOVO CAMPO ICMS Part*/
                           tt-nfe013.icmssn101-cod-sit-oper-sn    = ttdet.CSOSN /*2.0 - NOVO CAMPO ICMSSN101*/
                           tt-nfe013.icmssn102-cod-sit-oper-sn    = ttdet.CSOSN_00 /*2.0 - NOVO CAMPO ICMSSN102*/
                           tt-nfe013.icmssn201-cod-sit-oper-sn    = ttdet.CSOSN_01 /*2.0 - NOVO CAMPO ICMSSN201*/
                           tt-nfe013.icmssn201-mod-det-bc         = ttdet.modBCST_04 /*2.0 - NOVO CAMPO ICMSSN201*/
                           tt-nfe013.icmssn201-perc-marg-vl-adic  = ttdet.pMVAST_04 /*2.0 - NOVO CAMPO ICMSSN201*/
                           tt-nfe013.icmssn201-perc-red-bc        = ttdet.pRedBCST_04 /*2.0 - NOVO CAMPO ICMSSN201*/
                           tt-nfe013.icmssn201-vl-bc-icms-st      = ttdet.vBCST_04 /*2.0 - NOVO CAMPO ICMSSN201*/
                           tt-nfe013.icmssn201-aliq-imp-icms-st   = ttdet.pICMSST_04 /*2.0 - NOVO CAMPO ICMSSN201*/
                           tt-nfe013.icmssn201-vl-icms-st         = ttdet.vICMSST_04 /*2.0 - NOVO CAMPO ICMSSN201*/
                           tt-nfe013.icmssn201-aliq-calc-cre      = ttdet.pCredSN_00 /*2.0 - NOVO CAMPO ICMSSN201*/
                           tt-nfe013.icmssn201-vl-cred-icms       = ttdet.vCredICMSSN_00 /*2.0 - NOVO CAMPO ICMSSN201*/
                           tt-nfe013.icmssn202-cod-sit-oper-sn    = ttdet.CSOSN_02 /*2.0 - NOVO CAMPO ICMSSN202*/
                           tt-nfe013.icmssn202-mod-det-bc         = ttdet.modBCST_05 /*2.0 - NOVO CAMPO ICMSSN202*/
                           tt-nfe013.icmssn202-perc-marg-vl-adic  = ttdet.pMVAST_05 /*2.0 - NOVO CAMPO ICMSSN202*/
                           tt-nfe013.icmssn202-perc-red-bc        = ttdet.pRedBCST_05 /*2.0 - NOVO CAMPO ICMSSN202*/
                           tt-nfe013.icmssn202-vl-bc-icms-st      = ttdet.vBCST_05 /*2.0 - NOVO CAMPO ICMSSN202*/
                           tt-nfe013.icmssn202-aliq-imp-icms-st   = ttdet.pICMSST_05 /*2.0 - NOVO CAMPO ICMSSN202*/
                           tt-nfe013.icmssn202-vl-icms-st         = ttdet.vICMSST_05 /*2.0 - NOVO CAMPO ICMSSN202*/
                           tt-nfe013.icmssn500-cod-sit-oper-sn    = ttdet.CSOSN_03 /*2.0 - NOVO CAMPO ICMSSN500*/
                           tt-nfe013.icmssn500-vl-bc-icms-ret     = ttdet.vBCSTRet_01 /*2.0 - NOVO CAMPO ICMSSN500*/
                           tt-nfe013.icmssn500-vl-icms-ret        = ttdet.vICMSSTRet_01 /*2.0 - NOVO CAMPO ICMSSN500*/
                           tt-nfe013.icmssn900-cod-sit-oper-sn    = ttdet.CSOSN_04 /*2.0 - NOVO CAMPO ICMSSN900*/
                           tt-nfe013.icmssn900-mod-det-bc         = ttdet.modBC_06 /*2.0 - NOVO CAMPO ICMSSN900*/
                           tt-nfe013.icmssn900-vl-bc-icms         = ttdet.vBC_15 /*2.0 - NOVO CAMPO ICMSSN900*/
                           tt-nfe013.icmssn900-perc-red-bc        = ttdet.pRedBC_04 /*2.0 - NOVO CAMPO ICMSSN900*/
                           tt-nfe013.icmssn900-aliq-imp           = ttdet.pICMS_06 /*2.0 - NOVO CAMPO ICMSSN900*/
                           tt-nfe013.icmssn900-vl-icms            = ttdet.vICMS_07 /*2.0 - NOVO CAMPO ICMSSN900*/
                           tt-nfe013.icmssn900-mod-det-bc-st      = ttdet.modBCST_06 /*2.0 - NOVO CAMPO ICMSSN900*/
                           tt-nfe013.icmssn900-perc-marg-vl-adic  = ttdet.pMVAST_06 /*2.0 - NOVO CAMPO ICMSSN900*/
                           tt-nfe013.icmssn900-perc-red-bc-st     = ttdet.pRedBCST_06 /*2.0 - NOVO CAMPO ICMSSN900*/
                           tt-nfe013.icmssn900-vl-bc-icms-st      = ttdet.vBCST_06 /*2.0 - NOVO CAMPO ICMSSN900*/
                           tt-nfe013.icmssn900-aliq-imp-icms-st   = ttdet.pICMSST_06 /*2.0 - NOVO CAMPO ICMSSN900*/
                           tt-nfe013.icmssn900-vl-icms-st         = ttdet.vICMSST_06 /*2.0 - NOVO CAMPO ICMSSN900*/
                           tt-nfe013.icmssn900-aliq-aplic-cc-sn   = ttdet.pCredSN_01 /*2.0 - NOVO CAMPO ICMSSN900*/
                           tt-nfe013.icmssn900-vl-cred-icms       = ttdet.vCredICMSSN_01 /*2.0 - NOVO CAMPO ICMSSN900*/                    
                           tt-nfe013.icmssn101-aliq-calc-cred        = ttdet.pCredSN /*2.0 - NOVO CAMPO ICMSSN101*/
                           tt-nfe013.icmssn101-vl-cred               = ttdet.vCredICMSSN /*2.0 - NOVO CAMPO ICMSSN101*/
                           tt-nfe013.icms10-aliq-icms-st          = ttdet.pICMSST
                           tt-nfe013.icms10-mod-bc-st             = ttdet.modBCST
                           tt-nfe013.icms10-perc-red-bc-icms-st   = ttdet.pRedBCST
                           tt-nfe013.icms10-perc-vl-adic-icms     = ttdet.pMVAST
                           tt-nfe013.icms10-vl-bc-st              = ttdet.vBCST
                           tt-nfe013.icms10-vl-st                 = ttdet.vICMSST
                           tt-nfe013.icms20-reduc-bc              = ttdet.pRedBC
                           tt-nfe013.icms30-aliq-icms-st          = ttdet.pICMSST_00
                           tt-nfe013.icms30-mod-bc-st             = ttdet.modBCST_00
                           tt-nfe013.icms30-perc-vl-adic-icms     = ttdet.pMVAST_00
                           tt-nfe013.icms30-red-bc-icms-st        = ttdet.pRedBCST_00
                           tt-nfe013.icms30-vl-bc-icms-st         = ttdet.vBCST_00
                           tt-nfe013.icms30-vl-icms-st            = ttdet.vICMSST_00
                           tt-nfe013.icms40-mot-des-icms          = ttdet.motDesICMS /*2.0 - NOVO CAMPO*/
                           tt-nfe013.icms51-reduc-bc              = ttdet.pRedBC_00
                           tt-nfe013.icms60-vl-bc-st              = ttdet.vBCST_01
                           tt-nfe013.icms60-vl-st                 = ttdet.vICMSST_01
                           tt-nfe013.icms60-vl-bc-st-ret          = ttdet.vBCSTRet /*2.0 - NOVO CAMPO*/
                           tt-nfe013.icms60-vl-icms-st-ret        = ttdet.vICMSSTRet /*2.0 - NOVO CAMPO*/
                           tt-nfe013.icms70-aliq-st               = ttdet.pICMSST_01
                           tt-nfe013.icms70-mod-bc-st             = ttdet.modBCST_01
                           tt-nfe013.icms70-perc-margem-vl-adic   = ttdet.pMVAST_01
                           tt-nfe013.icms70-perc-red-bc-icms-st   = ttdet.pRedBCST_01
                           tt-nfe013.icms70-perc-reduc-bc         = ttdet.pRedBC_01
                           tt-nfe013.icms70-vl-bc-st              = ttdet.vBCST_02
                           tt-nfe013.icms70-vl-st                 = ttdet.vICMSST_02
                           tt-nfe013.icms90-aliq-st               = ttdet.pICMSST_02
                           tt-nfe013.icms90-mod-bc-st             = ttdet.modBCST_02                       
                           tt-nfe013.icms90-perc-margem-vl-adic   = ttdet.pMVAST_02
                           tt-nfe013.icms90-perc-red-bc-icms-st   = ttdet.pRedBCST_02
                           tt-nfe013.icms90-reduc-bc              = ttdet.pRedBC_02
                           tt-nfe013.icms90-vl-bc-st              = ttdet.vBCST_03
                           tt-nfe013.icms90-vl-st                 = ttdet.vICMSST_03                    
                           tt-nfe013.icmspart-perc-bc-op-prop     = ttdet.pBCOp /*2.0 - NOVO CAMPO ICMS Part*/
                           tt-nfe013.icmspart-uf-icms-st          = ttdet.UFST /*2.0 - NOVO CAMPO ICMS Part*/
                           tt-nfe013.icmspart-aliq-st             = ttdet.pICMSST_03 /*2.0 - NOVO CAMPO ICMS Part*/
                           tt-nfe013.icmspart-mod-bc-st           = ttdet.modBCST_03 /*2.0 - NOVO CAMPO ICMS Part*/
                           tt-nfe013.icmspart-perc-marg-vl-adic   = ttdet.pMVAST_03 /*2.0 - NOVO CAMPO ICMS Part*/
                           tt-nfe013.icmspart-perc-red-bc-icms-st = ttdet.pRedBCST_03 /*2.0 - NOVO CAMPO ICMS Part*/
                           tt-nfe013.icmspart-reduc-bc            = ttdet.pRedBC_03 /*2.0 - NOVO CAMPO ICMS Part*/
                           tt-nfe013.icmspart-vl-bc-st            = ttdet.vBCST_07 /*2.0 - NOVO CAMPO ICMS Part*/ 
                           tt-nfe013.icmspart-vl-st               = ttdet.vICMSST_07. /*2.0 - NOVO CAMPO ICMS Part*/
                    ASSIGN tt-nfe013.icmsst-vl-bc-ret-uf-rem      = ttdet.vBCSTRet_00 /*2.0 - NOVO CAMPO ICMS ST*/
                           tt-nfe013.icmsst-vl-icms-ret-uf-rem    = ttdet.vICMSSTRet_00 /*2.0 - NOVO CAMPO ICMS ST*/
                           tt-nfe013.icmsst-vl-bc-uf-dest         = ttdet.vBCSTDest /*2.0 - NOVO CAMPO ICMS ST*/
                           tt-nfe013.icmsst-vl-st-uf-dest         = ttdet.vICMSSTDest_00 /*2.0 - NOVO CAMPO ICMS ST*/
                           tt-nfe013.inf-complementar             = ttdet.infAdProd
                           tt-nfe013.it-codigo                    = ttdet.cProd
                           tt-nfe013.num-motor                    = ttdet.nMotor
                           tt-nfe013.num-serie                    = ttdet.nSerie
                           tt-nfe013.peso-bruto                   = ttdet.pesoB
                           tt-nfe013.peso-liq                     = ttdet.pesoL
                           tt-nfe013.pis-int-cst                  = ttdet.CST_10
                           tt-nfe013.pis-outros-cst               = ttdet.CST_11
                           tt-nfe013.pis-qtd-cst                  = ttdet.CST_09
                           tt-nfe013.pot-cm3                      = ttdet.CM3
                           tt-nfe013.pot-motor                    = ttdet.pot
                           tt-nfe013.cilindradas                  = ttdet.cilin /*2.0 - NOVO CAMPO*/
                           tt-nfe013.qtd-cofins-outros            = ttdet.qBCProd_03
                           tt-nfe013.qtd-cofins-prod              = ttdet.qBCProd_02
                           tt-nfe013.qtd-cofins-st                = ttdet.qBCProd_04
                           tt-nfe013.qtd-combustivel              = ttdet.qTemp
                           tt-nfe013.qtd-comercial                = trunc(ttdet.qCom,4) /*2.0 - Aumentou tamanho*/
                           tt-nfe013.qtd-pis-outros-vend          = ttdet.qBCProd_00
                           tt-nfe013.qtd-pis-prod-vend            = ttdet.qBCProd
                           tt-nfe013.qtd-pis-st-vend              = ttdet.qBCProd_01
                           tt-nfe013.qtd-selo-ipi                 = ttdet.qSelo
                           tt-nfe013.qtd-tot-ipi                  = ttdet.qUnid
                           tt-nfe013.qtd-trib                     = ttdet.qTrib /*2.0 - Aumentou tamanho*/
                           tt-nfe013.qtde-bc-prod                 = ttdet.qBCProd
                           tt-nfe013.renavam                      = ttdet.RENAVAM
                           tt-nfe013.tp-combustivel               = ttdet.tpComb
                           tt-nfe013.tp-oper-veic                 = ttdet.tpOp
                           tt-nfe013.tp-pintura                   = ttdet.tpPint
                           tt-nfe013.tp-veiculo                   = ttdet.tpVeic
                           tt-nfe013.uf-cons                      = ttdet.UFCons
                           tt-nfe013.un-comercial                 = ttdet.uCom
                           tt-nfe013.un-trib                      = ttdet.uTrib
                           tt-nfe013.vl-aliq-cide                 = ttdet.vAliqProd
                           tt-nfe013.vl-aliq-cofins-outros        = ttdet.vAliqProd_03
                           tt-nfe013.vl-aliq-cofins-qtd           = ttdet.vAliqProd_02
                           tt-nfe013.vl-aliq-cofins-st            = ttdet.vAliqProd_04
                           tt-nfe013.vl-aliq-pis-outros           = ttdet.vAliqProd_00
                           tt-nfe013.vl-aliq-pis-qtd              = ttdet.vAliqProd
                           tt-nfe013.vl-aliq-pis-st-prod          = ttdet.vAliqProd_01
                           tt-nfe013.vl-bc-cofins                 = ttdet.vBC_10
                           tt-nfe013.vl-bc-cofins-outros          = ttdet.vBC_11
                           tt-nfe013.vl-bc-cofins-st              = ttdet.vBC_12
                           tt-nfe013.vl-bc-icms-part              = ttdet.vBC_14 /*2.0 - NOVO CAMPO ICMS Part*/
                           tt-nfe013.vl-bc-icms-prop              = ttdet.vBCICMS
                           tt-nfe013.vl-bc-icms-st-cons           = ttdet.vBCICMSSTCons.
                    ASSIGN tt-nfe013.vl-bc-icms-st-dest           = ttdet.vBCICMSSTDest
                           tt-nfe013.vl-bc-icms-st-prop           = ttdet.vBCICMSST
                           tt-nfe013.vl-bc-ii                     = ttdet.vBC_06
                           tt-nfe013.vl-bc-ipi                    = ttdet.vBC_05
                           tt-nfe013.vl-bc-iss                    = ttdet.vBC_13
                           tt-nfe013.vl-bc-pis                    = ttdet.vBC_07
                           tt-nfe013.vl-bc-pis-outros             = ttdet.vBC_08
                           tt-nfe013.vl-bc-pis-st                 = ttdet.vBC_09
                           tt-nfe013.preco-unit                   = ttdet.vUnCom /*2.0 - Aumentou tamanho*/
                           tt-nfe013.preco-total                  = ttdet.vProd
                           tt-nfe013.vl-cide                      = ttdet.vCide
                           tt-nfe013.vl-cofins-aliq               = ttdet.vCOFINS
                           tt-nfe013.vl-cofins-outros             = ttdet.vCOFINS_01
                           tt-nfe013.vl-cofins-qtd                = ttdet.vCOFINS_00
                           tt-nfe013.vl-cofins-st                 = ttdet.vCOFINS_02
                           tt-nfe013.vl-desconto                  = ttdet.vDesc
                           tt-nfe013.vl-outros                    = ttdet.vOutro /*2.0 - NOVO CAMPO*/
                           tt-nfe013.vl-desp-aduaneira            = ttdet.vDespAdu
                           tt-nfe013.vl-frete                     = ttdet.vFrete
                           tt-nfe013.vl-icms-prop                 = ttdet.vICMS
                           tt-nfe013.vl-icms-st-cons              = ttdet.vICMSSTCons
                           tt-nfe013.vl-icms-st-dest              = ttdet.vICMSSTDest
                           tt-nfe013.vl-icms-st-prop              = ttdet.vICMSST
                           tt-nfe013.vl-ii                        = ttdet.vII
                           tt-nfe013.vl-iof                       = ttdet.vIOF
                           tt-nfe013.vl-ipi                       = ttdet.vIPI
                           tt-nfe013.vl-iss                       = ttdet.vISSQN
                           tt-nfe013.vl-pis                       = ttdet.vPIS
                           tt-nfe013.vl-pis-outros                = ttdet.vPIS_01
                           tt-nfe013.vl-pis-qtd                   = ttdet.vPIS_00
                           tt-nfe013.vl-pis-st                    = ttdet.vPIS_02
                           tt-nfe013.vl-seguro                    = ttdet.vSeg
                           tt-nfe013.vl-unid-ipi                  = ttdet.vUnid                    
                           tt-nfe013.vl-unit-trib                 = ttdet.vUnTrib /*2.0 - Aumentou tamanho*/
                           tt-nfe013.ind-tot                      = ttdet.indTot /*2.0 - NOVO CAMPO*/
                           tt-nfe013.num-ped-compr                = ttdet.xPed /*2.0 - NOVO CAMPO*/
                           tt-nfe013.item-ped-compr               = ttdet.nItemPed /*2.0 - NOVO CAMPO*/
                           tt-nfe013.cap-max-trac                 = ttdet.CMT /*2.0 - NOVO CAMPO*/
                           tt-nfe013.cod-cor-denatran             = ttdet.cCorDENATRAN /*2.0 - NOVO CAMPO*/
                           tt-nfe013.cap-max-lot                  = ttdet.lota /*2.0 - NOVO CAMPO*/
                           tt-nfe013.restricao                    = ttdet.tpRes. /*2.0 - NOVO CAMPO*/

                    FOR EACH  ttadi
                        WHERE ttadi.chave =  ttNFe.chave:
                
                        FIND FIRST tt-nfe009
                             WHERE tt-nfe009.ch-acesso-comp-nfe = ttdet.chave    
                             AND   tt-nfe009.idi-orig-trad      = 1 
                             AND   tt-nfe009.seq-item           = ttadi.seq        NO-ERROR.
                        IF NOT AVAIL tt-nfe009 THEN DO:
                
                            CREATE tt-nfe009.
                            ASSIGN tt-nfe009.ch-acesso-comp-nfe = ttdet.chave 
                                   tt-nfe009.idi-orig-trad      = 1       
                                   tt-nfe009.seq-item           = ttadi.seq
                                   tt-nfe009.numero-di          = ttDI.nDI
                                   tt-nfe009.num-seq-item       = ttadi.nSeqAdic
                                   tt-nfe009.num-adicao         = ttadi.nAdicao
                                   tt-nfe009.cod-fabricante     = ttadi.cFabricante
                                   tt-nfe009.vl-desconto        = ttadi.vDescDI.
                        END.
                    END.
                  
                    FOR EACH ttarma
                        WHERE ttarma.chave =  ttNFe.chave:
                
                        FIND FIRST tt-nfe010
                             WHERE tt-nfe010.ch-acesso-comp-nfe = ttdet.chave   
                             AND   tt-nfe010.idi-orig-trad      = 1   
                             AND   tt-nfe010.seq-item           = ttarma.seq      NO-ERROR.
                        IF NOT AVAIL tt-nfe010 THEN DO:
                
                            CREATE tt-nfe010.
                            ASSIGN tt-nfe010.ch-acesso-comp-nfe = ttdet.chave  
                                   tt-nfe010.idi-orig-trad      = 1        
                                   tt-nfe010.seq-item           = ttarma.seq
                                   tt-nfe010.num-serie          = ttarma.nSerie
                                   tt-nfe010.desc-arma          = ttarma.descr 
                                   tt-nfe010.num-serie-cano     = ttarma.nCano 
                                   tt-nfe010.tp-arma            = ttarma.tpArma.
                        END.
                    END.
                    
                    FOR EACH ttDI
                        WHERE ttDI.chave =  ttNFe.chave:
                
                        
                        FIND FIRST tt-nfe011
                             WHERE tt-nfe011.ch-acesso-comp-nfe = ttdet.chave    
                             AND   tt-nfe011.idi-orig-trad      = 1      
                             AND   tt-nfe011.seq-item           = ttDI.seq    NO-ERROR.
                        IF NOT AVAIL tt-nfe011 THEN DO:
                
                            CREATE tt-nfe011.
                            ASSIGN tt-nfe011.ch-acesso-comp-nfe = ttdet.chave   
                                   tt-nfe011.idi-orig-trad      = 1         
                                   tt-nfe011.seq-item           = ttDI.seq
                                   tt-nfe011.numero-di          = ttDI.nDI
                                   tt-nfe011.cod-exportador     = ttDI.cExportador
                                   tt-nfe011.dt-desemb          = ttDI.dDesemb
                                   tt-nfe011.dt-di              = ttDI.dDI
                                   tt-nfe011.local-desemb       = ttDI.xLocDesemb
                                   tt-nfe011.uf-desemb          = ttDI.UFDesemb.
    
                        END.
                    END.
                
                    FOR EACH ttmed
                        WHERE ttmed.chave =  ttNFe.chave:
                
                        FIND FIRST tt-nfe012
                             WHERE tt-nfe012.ch-acesso-comp-nfe = ttdet.chave    
                             AND   tt-nfe012.idi-orig-trad      = 1          
                             AND   tt-nfe012.seq-item           = ttmed.seq    NO-ERROR.
                        IF NOT AVAIL tt-nfe012 THEN DO:
                
                            CREATE tt-nfe012.
                            ASSIGN tt-nfe012.ch-acesso-comp-nfe =  ttdet.chave  
                                   tt-nfe012.idi-orig-trad      =  1        
                                   tt-nfe012.seq-item           = ttmed.seq
                                   tt-nfe012.lote               = ttmed.nLote
                                   tt-nfe012.dt-fabricacao      = ttmed.dFab 
                                   tt-nfe012.dt-validade        = ttmed.dVal 
                                   tt-nfe012.preco-maximo       = ttmed.vPMC
                                   tt-nfe012.qtd-lote           = ttmed.qLote.
                        END.
                    END.
                END. /*FIND FIRST tt-nfe013*/
            END. /*for each ttdet*/
        END.  /*FIND FIRST  tt-nfe003*/
    END.  /*for each ttNFE*/
    


     IF SEARCH("esp/esnfapi001.r":U) <> ?
    OR SEARCH("esp/esnfapi001.p":U) <> ? THEN DO:  
                
     /*FIND FIRST tt-nfe003 NO-ERROR.*/

     for each btt-nfe003:
         create tt-nfe003.
         buffer-copy btt-nfe003 to tt-nfe003.

         for each tt-nfe004:
             create btt-nfe004.
             buffer-copy tt-nfe004 except ch-acesso-comp-nfe to btt-nfe004.
             assign btt-nfe004.ch-acesso-comp-nfe = btt-nfe003.ch-acesso-comp-nfe.
         end.

         for each tt-nfe001:
             create btt-nfe001.
             buffer-copy tt-nfe001 except ch-acesso-comp-nfe to btt-nfe001.
             assign btt-nfe001.ch-acesso-comp-nfe = btt-nfe003.ch-acesso-comp-nfe.
         end.

         for each tt-nfe021:
             create btt-nfe021.
             buffer-copy tt-nfe021 except ch-acesso-comp-nfe to btt-nfe021.
             assign btt-nfe021.ch-acesso-comp-nfe = btt-nfe003.ch-acesso-comp-nfe.
         end.
                            
         for each tt-nfe002:
             create btt-nfe002.
             buffer-copy tt-nfe002 except ch-acesso-comp-nfe to btt-nfe002.
             assign btt-nfe002.ch-acesso-comp-nfe = btt-nfe003.ch-acesso-comp-nfe.
         end.

         for each tt-nfe005:
             create btt-nfe005.
             buffer-copy tt-nfe005 except ch-acesso-comp-nfe to btt-nfe005.
             assign btt-nfe005.ch-acesso-comp-nfe = btt-nfe003.ch-acesso-comp-nfe.
         end.
     end.

     for each btt-nfe004:
         create tt-nfe004.
         buffer-copy btt-nfe004 to tt-nfe004.
     end.

     for each btt-nfe001:
         create tt-nfe001.
         buffer-copy btt-nfe001 to tt-nfe001.
     end.

     for each btt-nfe021:
         create tt-nfe021.
         buffer-copy btt-nfe021 to tt-nfe021.
     end.

     for each btt-nfe002:
         create tt-nfe002.
         buffer-copy btt-nfe002 to tt-nfe002.
     end.

     for each btt-nfe005:
         create tt-nfe005.
         buffer-copy btt-nfe005 to tt-nfe005.
     end.

     /**************************************/

     RUN esp/esnfapi001.p (INPUT TABLE tt-nfe003,
                           INPUT TABLE tt-nfe001, 
                           INPUT TABLE tt-nfe002,
                           INPUT TABLE tt-nfe005,
                           INPUT TABLE tt-nfe004,
                           INPUT TABLE tt-nfe021,
                           INPUT TABLE tt-nfe013,
                           INPUT TABLE tt-nfe009,
                           INPUT TABLE tt-nfe010,
                           INPUT TABLE tt-nfe011,
                           INPUT TABLE tt-nfe012,
                           INPUT-OUTPUT TABLE tt-erro).
      
     
     FOR EACH tt-erro:
            IF tt-erro.cd-erro = 15825 THEN
                NEXT.

            IF VALID-HANDLE(hMessageHandler) THEN
            RUN setError IN hMessageHandler (INPUT tt-erro.cd-erro,
                                             INPUT "business_error":U,  /* Erro de neg¢cio */
                                             INPUT tt-erro.desc-erro).
        END.
     END.
     ELSE 
         /* Programa de efetivaá∆o n∆o localizado */
         RUN setError IN hMessageHandler (INPUT 0,
                                          INPUT "enviroment_error":U,
                                          INPUT "Erro de integraá∆o. N∆o foi poss°vel localizar o programa 'esp/esnfapi001.p' a ser executado pelo programa adapters/xml/esp/axres002.p.").
     
     /* ********* EFETIVAÄ«O - END   ********* */

/* ******************************************* */
/* *************** BODY - END   ************** */
/* ******************************************* */

END PROCEDURE.


PROCEDURE receiveMessage:

/*PARAMETERS - BEGIN*/
    DEFINE INPUT PARAM hInputXML AS HANDLE NO-UNDO.
    DEFINE OUTPUT PARAM hOutputXML AS HANDLE NO-UNDO.
/*PARAMETERS - END*/


/*LOCAL VARIABLES - BEGIN*/
/*LOCAL VARIABLES - END*/


/* ******************************************* */
/* *************** BODY - BEGIN ************** */
/* ******************************************* */

     /* VERIFICA SE MessageHandler.p ESTA NA MEMORIA */
     {xmlinc/xmlLoadMessageHandlerRec.i &MessageHandler="hMessageHandler" &MHReturnValue="cReturnValue" &MHReturnError="hOutputXML"}

     IF cReturnValue <> "OK" THEN DO:
          RETURN cReturnValue.
     END.

     /* INTERPRETA, ARMAZENA E VALIDA A MENSAGEM QUE RECEBE */
     RUN parseMessage IN hMessageHandler (
          INPUT  hInputXml, INPUT "{&XmlTranName}", 
          INPUT "{&XmlMaxTranVersion}", 
          INPUT "{&XmlMinTranVersion}", 
          INPUT "{&XmlListOfEvents}",
          OUTPUT lSuccessProcess,
          OUTPUT cTranAction, 
          OUTPUT cTranEvent,
          OUTPUT cTranVersion,
          OUTPUT hOutputXML ).

     /* SE N«O PROCESSOU CORRETAMENTE RETORNA ERRO */
     IF NOT lSuccessProcess OR RETURN-VALUE <> "OK" THEN 
     /* DAR TRATAMENTO CONVENIENTE ANTES DE RETORNAR */
          RETURN RETURN-VALUE.

     /* VERIFICA SE APIXML ESTA NA MEMORIA */
     {xmlinc/xmlloadgenxmlrec.i &GenXml="hGenXml" &GXReturnValue="cReturnValue" &GXReturnError="hOutputXML"}

     /* VERIFICA SE O ut-genxml FOI INICIADO CORRETAMENTE */
     IF cReturnValue <> "OK"
     THEN DO:
         /* ELIMINA A MENSAGEM OBTIDA NO M?TODO getBusinessContent */
          DELETE OBJECT hBusinessContent NO-ERROR.

          RETURN cReturnValue.
     END.
     
     IF (cTranAction = "add") or (cTranAction = "upd") THEN DO:
         RUN PIUpsert.                                     
     END.
     
     RUN getReturnMessage IN hMessageHandler (OUTPUT hOutputXML).

END PROCEDURE.







